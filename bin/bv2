#! /usr/bin/env python
# -*- coding: utf-8 -*-

import os
import os.path as osp
import signal
import subprocess
import sys


def failure(message):
    print('ERROR:', message, file=sys.stderr)
    sys.exit(1)


help = False
verbose = None

me = osp.basename(sys.argv[0])
if me != 'bv2':
    # we are invoked as another name from 'bv': we are obviously a symlink to
    # the bv script. In that situation we should:
    # - use the name we have been invoked as as the command to run in the
    #   container, as if called as "bv otherprogram"
    # - dereference the symlink to get the actual bv script in sys.argv[0]
    #   because we will use its path to find out the environment dir
    # - There is an exception for a symlink called casa_distro. In this case
    #   casa_distro is called directly without using the container.
    if osp.islink(sys.argv[0]):
        sys.argv.insert(1, me)
        bv = os.readlink(sys.argv[0])
        if not osp.isabs(bv):
            bv = osp.join(osp.dirname(sys.argv[0]), bv)
        sys.argv[0] = bv

i = 1
while i < len(sys.argv):
    option = sys.argv[i]
    if option in ('-h', '--help'):
        help = True
    elif option in ('-v', '--verbose'):
        verbose = sys.stdout
    else:
        break
    i += 1
command = sys.argv[i:]


if help:
    print('''usage: bv2 [-h] [-v] [command...]

Command used to start any BrainVISA related program.

It is meant to be used from outside a container, and runs commands inside a
container.

optional arguments:
  -h, --help     show this help message and exit
  -v, --verbose
''')
    sys.exit()


if 'SINGULARITY_CONTAINER' in os.environ:
    print('the "%s" command has been called from within a casa-distro '
          'container. This is not the way it should be used: it must be '
          'called from the host system.' % osp.basename(sys.argv[0]),
          file=sys.stderr)
    sys.exit(1)


bv = osp.normpath(osp.abspath(sys.argv[0]))
real_bv = osp.realpath(bv)
environment_dir = osp.dirname(osp.dirname(osp.dirname(osp.dirname(real_bv))))
command = sys.argv[1:]
host_command = ['singularity', 'run', osp.join(environment_dir, 'image')]
host_command += command

if verbose:
    print('Container command =', ' '.join("'{}'".format(i) for i in command))
    print('Host command =', ' '.join("'{}'".format(i) for i in host_command))

# Avoid displaying a stack trace if the child command is interrupted with
# Ctrl+C
signal.signal(signal.SIGINT, signal.SIG_DFL)

retcode = subprocess.call(host_command)
sys.exit(retcode)
