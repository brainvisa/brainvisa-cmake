#!/usr/bin/env python

from __future__ import print_function
import subprocess
import os
import sys
import platform
from optparse import OptionParser
try:
    from brainvisa.config import fullVersion
except ImportError:
    # axon is not installed
    fullVersion = '1.0.0'

#default_build_repos_dir \
    #= '/neurospin/brainvisa/repositories/build-repos/%(i2bm)s/%(version)s/%(os)s'
default_mirror_repos_dir \
    = '/neurospin/brainvisa/repositories/%(i2bm)s/' \
        '%(version)s/%(os)s/packages'
default_share_mirror_dir \
    = '/neurospin/brainvisa/repositories/public/%(version)s/data/packages'
default_output \
    = '/neurospin/brainvisa/repositories/%(i2bm)s/' \
        '%(version)s/%(os)s/brainvisa-installer/brainvisa_installer-' \
        '%(version)s-%(os)s-%(online)s%(public)s'

systems = {'darwin' : 'osx'}
i2bm_str = 'public'
osname = platform.system().lower()
osname = systems.get(osname, osname)
public = ''
online = 'online'
if osname == 'linux':
    if platform.architecture()[0] == '64bit':
        osname += '64'
    else:
        osname += '32'
    # determine libc version - using ctypes and calling C
    # gnu_get_libc_version() function
    # Note: plaform.libc_ver() is completely bogus.
    import ctypes
    libc = ctypes.cdll.LoadLibrary("libc.so.6")
    gnu_get_libc_version = libc.gnu_get_libc_version
    gnu_get_libc_version.restype = ctypes.c_char_p
    osname += '-glibc-' + '.'.join(gnu_get_libc_version().split('.')[:2])
elif osname == 'windows':
    osname = 'win32'
    # how is is for win64 ?

parser = OptionParser(usage='%prog [options]',
    version='%prog 1.0',
    description='Creates a BrainVISA repository/packager from the current '
        'build directory ('+fullVersion+' version).')
parser.add_option('-i', '--i2bm',
    action='store_true', dest='i2bm', default=False,
    help = 'Creates a repository for I2BM users, some private packages are '
        'included, and system components removed.')
parser.add_option('-m', '--mirror_repos', action='store', type='string',
    dest='mirror_repos', default='',
    help='Mirror repository directory (default: %s).\n'
    'The directory specification may contain string formatting variables '
    '%s(i2bm)s, %s(version)s and/or %s(os)s which will be replaced by their '
    'values.\n'
    'If the --data option is used, the data repository directory is: %s\n'
    'Variables values:\n'
    '  * i2bm: "i2bm" if -i option is used, "public" otherwise\n'
    '  * version: axon version: %s\n'
    '  * os: "linux32-glibc-2.6", "linux64-glibc-2.15" etc., "osx", "win32", here: %s\n'
    '  * public: "-i2bm" or empty\n'
    '  * online: "online" or "offline"\n'
    'repositories with thirdparty components,\n'
    % (default_mirror_repos_dir, '%', '%', '%', default_share_mirror_dir,
       fullVersion, osname))
#parser.add_option('-b', '--build_repos', action='store', type='string',
    #dest='build_repos', default=default_build_repos_dir,
    #help='Build repository directory (default: %s). Same syntax as for '
    #'--mirror_repos' % default_build_repos_dir)
parser.add_option('-o', '--output', action='store', type='string',
    dest='output', default=default_output,
    help='output intaller (default: %s). Same syntax as for '
    '--mirror_repos' % default_output)
parser.add_option('--skip-repos', dest='skip_repos',
    action='store_true',
    help='Skip initial (temp) repository creation. Assumes it has already been done.')

parser.add_option('--skip-repogen', dest='skip_repogen',
    action='store_true',
    help='Skip repogen (final repository creation + compression). Assumes it has already been done.')

parser.add_option('--skip-existing', dest='skip_existing',
    action='store_true',
    help='Don\'t rebuild components which already have a directory in '
    'the temporary repository directory.')

parser.add_option('--data', dest='data', action='store_true',
    help='package OS-independent data repository (brainvisa-share and '
    'sulci-models) instead of the software repository')

parser.add_option('-s', '--dry-run', dest='dry_run', action='store_true',
                  help='simulation: don\'t actually perform actions.')

options, args = parser.parse_args()
if len( args ) > 0:
  parser.error('Invalid arguments. Try %s --help" to get some help.'
    % sys.argv[0])

if options.i2bm:
    i2bm_str = 'i2bm'
    #osname = os.getenv('I2BM_OSID')
    public = '-i2bm'


pathvars = {'i2bm' : i2bm_str, 'os' : osname, 'version' : fullVersion,
    'public' : public, 'online' : online}

#build_repos_dir = options.build_repos % pathvars
if options.mirror_repos == '':
    if options.data:
        mirror_repos_dir = default_share_mirror_dir
    else:
        mirror_repos_dir = default_mirror_repos_dir
else:
    mirror_repos_dir = options.mirror_repos
mirror_repos_dir = mirror_repos_dir % pathvars
output = options.output % pathvars

if options.data:
    projects = ['brainvisa-share']
    components = ['sulci-models']
else:
    projects = ['aims', 'anatomist', 'axon', 'soma', 'brainrat',
        'capsul', 'connectomist', 'cortical_surface', 'datamind',
        'morphologist', 'snapbase']
    components = []
cmd = [sys.executable, os.path.join(os.path.dirname(sys.argv[0]),
                                    'bv_build_installer.py'),
    '-t', 'run', 'dev', 'usrdoc', 'devdoc', 'test', '-r', mirror_repos_dir,
    '--platform_name', osname]
if options.i2bm:
    i2bm_options = ['--no-thirdparty', '--i2bm']
    cmd += i2bm_options
    projects += ['nuclear_imaging', 'data_storage_client', 'disco']
    components += ['constellation-private', 'constellation-gpl',
        'bioprocessing']
if options.data:
    cmd += ['--repository-only', '--no-dependencies', '--no-thirdparty',
            '--data']
else:
    cmd += ['-i', output, '--online-only']
if options.skip_repos:
    cmd.append('--skip-repos')
if options.skip_repogen:
    cmd.append('--skip-repogen')
if options.skip_existing:
    cmd.append('--skip-existing')
cmd += ['-p'] + projects
if len(components) != 0:
  cmd += ['-n'] + components

print('paths:')
#print('build repos:', build_repos_dir)
print('mirror:', mirror_repos_dir)
if not options.data:
    print('installer:', output)
print('command:', cmd)
if not options.dry_run:
    subprocess.check_call(cmd)


