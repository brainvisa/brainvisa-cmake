#!/usr/bin/env python
# -*- coding: utf-8 -*-

#  This software and supporting documentation are distributed by
#      Institut Federatif de Recherche 49
#      CEA/NeuroSpin, Batiment 145,
#      91191 Gif-sur-Yvette cedex
#      France
#
# This software is governed by the CeCILL-B license under
# French law and abiding by the rules of distribution of free software.
# You can  use, modify and/or redistribute the software under the 
# terms of the CeCILL-B license as circulated by CEA, CNRS
# and INRIA at the following URL "http://www.cecill.info". 
#
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability.
#
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or 
# data to be ensured and,  more generally, to use and operate it in the 
# same conditions as regards security.
#
# The fact that you are presently reading this means that you have had
# knowledge of the CeCILL-B license and that you accept its terms.

import sys
from brainvisa.compilation_info import *


class PackageSelection( object ):
  def __init__( self ):
    pass
  
  def isSelected( self, package_info ):
    pass
  
  def addRule( self, rule ):
    pass

usage = '''bv_package [options] <package_type> [ <selection_rule> ... ]

This program is for the creation of packages and dependency graph for build directories.

Package types:
  list: Only list selected packages
  dot: Create a Graphviz dependency graph for selected packages
  dir: Create a single directory containing all selected packages
  deb: Create a debian package for each selected packages

Selection rule:
  +<selection_pattern>: Adds all packages corresponding to the selection pattern
  -<selection_pattern>: Remove all packages corresponding to the selection pattern

Selection pattern:
  <property>=<pattern>[,<property>=<pattern>...]: matc all packages where every selected property match the corresponding pattern
  <pattern>: equivalent to name=<pattern>

Packages properties:
  name: Name of the package
  type: Type of the package
  version: Package version
  project: Name of the project containing the package.
  maintainer: Name of the maintainer of the package

Package types:
  run: Runtime package
  dev: Development package
  doc: Documentation package
  thirdparty: Package corresponding to a thirdparty project not compiled in the build directory

Default selection rule:
  +type=run: select all 

Examples:
  Create a dependency graph for runtime packages
    bv_package -o /tmp/dependency-run.dot dot
  
  Create a dependency graph for development packages
    bv_package -o /tmp/dependency-dev.dot dot +type=dev
  
  Create debian packages for all runtime packages in soma project
    bv_package deb +project=soma,type=run
    
  Create debian packages for all runtime packages except brainvisa-system:
    bv_package deb +type=run -name=brainvisa-system
'''

if '-h' in sys.argv or '--help' in sys.argv:
  print usage
  sys.exit()

def dot():
  out = sys.stdout
  nodes = {}
  print >> out, 'digraph packages_dependencies {'
  done = set()
  todo = [ package[ 'name' ] for package in packages_info.itervalues() if package[ 'type' ] == 'run' and package[ 'project' ] != 'thirdparty' ]
  while todo:
    source_package = todo.pop( 0 )
    if source_package in done:
      continue
    done.add( source_package )
    source_package = packages_info[ source_package ]
    source_node = nodes.get( source_package[ 'name' ] )
    if source_node is None:
      source_node = str( len( nodes ) )
      nodes[ source_package[ 'name' ] ] = source_node
      if source_package[ 'project' ] == 'thirdparty':
        print '  %s [ label="%s", color=orange ]' % ( source_node, source_package[ 'name' ] )
      else:
        print '  %s [ label="%s" ]' % ( source_node, source_package[ 'name' ] )
    for dependency_type, dest_package, version_ranges, binary_independent  in packages_dependencies.get( source_package[ 'name' ], () ):
      todo.append( dest_package )
      dest_package = packages_info[ dest_package ]
      dest_node = nodes.get( dest_package[ 'name' ] )
      if dest_node is None:
        dest_node = str( len( nodes ) )
        nodes[ dest_package[ 'name' ] ] = dest_node
        if dest_package[ 'project' ] == 'thirdparty':
          print '  %s [ label="%s", color=orange ]' % ( dest_node, dest_package[ 'name' ] )
        else:
          print '  %s [ label="%s" ]' % ( dest_node, dest_package[ 'name' ] )
      if dependency_type == 'DEPENDS':
        color='black'
      elif dependency_type == 'RECOMMENDS':
        color='green'
      else:
        color='blue'
      print '  %s -> %s [ color=%s ]' % ( source_node, dest_node, color )
  print '}'


dot()
