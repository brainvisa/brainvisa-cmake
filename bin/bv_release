#!/usr/bin/env python
# -*- coding: utf-8 -*-

#  This software and supporting documentation are distributed by
#      Institut Federatif de Recherche 49
#      CEA/NeuroSpin, Batiment 145,
#      91191 Gif-sur-Yvette cedex
#      France
#
# This software is governed by the CeCILL-B license under
# French law and abiding by the rules of distribution of free software.
# You can  use, modify and/or redistribute the software under the
# terms of the CeCILL-B license as circulated by CEA, CNRS
# and INRIA at the following URL "http://www.cecill.info".
#
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability.
#
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or
# data to be ensured and,  more generally, to use and operate it in the
# same conditions as regards security.
#
# The fact that you are presently reading this means that you have had
# knowledge of the CeCILL-B license and that you accept its terms.

from __future__ import print_function

import sys
from optparse import OptionParser

from brainvisa.maker.version_number import VersionNumber, \
                                           version_format_release

from brainvisa.maker.brainvisa_projects import url_per_component, \
                                               project_per_component, \
                                               find_components

from brainvisa.maker.brainvisa_client_components import \
                                                get_version_control_component, \
                                                BranchType


class ActionType:
    """ Client action types that can be used
        BRANCH_CREATE: action to create a new branch
        BRANCH_UPDATE_VERSION_INFO: action to update version in project info
                                    file of a branch
        BRANCH_MERGE_VERSION_INFO: action to merge version project info
                                   file of a branch with another one
    """
    BRANCH_CREATE = 'branch_create'
    BRANCH_UPDATE_VERSION_INFO = 'branch_update_version_info'
    BRANCH_MERGE_VERSION_INFO = 'branch_merge_version_info'


def execute_action( type,
                   client,
                   params ):

    if type not in ( ActionType.BRANCH_CREATE,
                     ActionType.BRANCH_UPDATE_VERSION_INFO,
                     ActionType.BRANCH_MERGE_VERSION_INFO ):
        raise RuntimeError( 'Action type: ' + type + ' is not valid.' )

    return getattr( client, type )(
            *params
           )

usage = '''%prog <branch_type> <projects> [options]

Create a bug fix or a release branch of the given projects with the given
version number. If the version is not indicated, a new version number is created
from the last existing version number. The type of branch can be 'bug_fix' to
move branches/bug_fix to branches/X.Y and copy trunk to branches/bug_fix branch
or 'release' to move tags/latest_release to tags/X.Y.Z and copy branches/bug_fix
to tags/latest_release. The project_info.cmake files in each component will be
updated with the new version number. The trunk version is merged in order to
validate the differences in project_info.cmake files.

Equivalent svn commands:
svn copy --parents project/trunk project/branches/version -m "Creating a version bug fix branch of the project."
svn copy --parents project/trunk project/tags/version -m "Creating a version release branch of the project."
'''
parser = OptionParser(usage = usage)
parser.add_option( '-v', '--version', dest = 'version', default = None,
                   help = 'Version number of the branch: X.Y for a bug fix '
                        + 'branch, X.Y.Z for a release branch.' )
parser.add_option( '-s', '--simulation', dest = 'simulation',
                   default = False, action = 'store_true',
                   help = 'Do not execute the svn commands, just show the '
                        + 'commands.' )
parser.add_option( '--no-branch', dest = 'branch',
                   default = True, action = 'store_false',
                   help = 'Do not create branches.' )
parser.add_option( '--no-update', dest = 'update',
                   default = True, action = 'store_false',
                   help = 'Do not update the project info file.' )
parser.add_option( '--no-auto-merge', dest = 'auto_merge',
                   default = True, action = 'store_false',
                   help = 'Disable automatic merge of project info file.' )
parser.add_option( '--force', dest = 'force',
                   default = False, action = 'store_true',
                   help = 'Force processing in cases of inconsitencies.' )
parser.add_option( '-q', dest = 'verbose',
                   default = True, action = 'store_false',
                   help = 'Quietly run without displaying information.')
(options, args) = parser.parse_args()
# at least one argument: the type of branch bug_fix of release
if len( args ) < 1:
    parser.error( 'Invalid arguments: branch type parameter is mandatory.' )

branch_type_dest = args[0]
if branch_type_dest not in ( BranchType.BUG_FIX,
                             BranchType.RELEASE ):
    parser.error( 'Invalid arguments: branch type must be either '
                + 'bug_fix or release.' )

version_dest = None
components = set()
for arg in args[1:]:
    components.update(find_components(arg))

#if options.verbose:
    #print('Selected components : ', components)

if options.version:
    version_numbers = options.version.split( '.' )
    if (len(version_numbers) != 2) \
        and (branch_type_dest == BranchType.BUG_FIX):
        parser.error( 'Invalid arguments: version number should be something '
                    + 'like X.Y for a bug fix branch.' )
    elif (len(version_numbers) != 3) \
        and (branch_type_dest == BranchType.RELEASE):
        parser.error( 'Invalid arguments: version number should be something '
                    + 'like X.Y.Z for a release branch.' )

if options.update:
    #auto_merge = False
    #if (branch_type_dest == BranchType.RELEASE) \
        #and (options.auto_merge is None):
        ## It can be dangerous to automatically merge bug_fix -> trunk in case of
        ## a release branch if there are current revisions in the bug_fix branch
        ## that are not yet integrated in the trunk branch, these revision would
        ## be also marked as merged but not really reported. So the user is
        ## warned and asked about what he wants to do.
        #print('\n*BE CAREFUL*: This script can automatically mark the trunk ' \
            #+ 'branch as merged with the bug_fix branch to avoid reporting ' \
            #+ 'the version number change of the bug_fix branch in the trunk ' \
            #+ 'branch in the future merges. But before doing that you should ' \
            #+ 'check that all revisions of bug_fix branch are correctly ' \
            #+ 'merged in the trunk version. \nAre you sure you want to do ' \
            #+ 'this automatic merge ? (y/n)')
        #line = sys.stdin.readline()[:-1] # This may not work on windows
        #if line == "y":
            #auto_merge = True

    if( options.auto_merge is not None ):
        auto_merge = options.auto_merge

    else:
        auto_merge = True

branch_create_actions = []
branch_update_version_info_actions = []
branch_merge_version_info_actions = []

for component in components:

    # As we only have client information for trunk,
    # latest_bug_fix and latest_release
    # we always use the trunk client information
    project = project_per_component[ component ]
    trunk_client_info = url_per_component[ component ][ 'trunk' ]
    client_comp = get_version_control_component(
                      project_per_component[ component ],
                      component,
                      trunk_client_info
                  )
    if options.verbose:
        print('Component:', project + ':' + component)

    # Processes source branch type
    if branch_type_dest == BranchType.RELEASE:
        # The source branch is bug fix
        branch_type_src = BranchType.BUG_FIX

    else:
        # The source branch is trunk
        branch_type_src = BranchType.TRUNK

    # Processes versions
    if options.version is None:

        # Get the maximum source version
        print('Retrieving maximum version for', branch_type_src, '...', end='')
        sys.stdout.flush()
        version_max_src, branch_name_max_src = client_comp.branch_version_max(
                                                   branch_type_src
                                               )
        print('OK')
        version_src = version_max_src
        branch_name_src = branch_name_max_src

        # The destination version is the one from source
        # Trunk version => new bug_fix branch version
        # Latest bug_fix version => new release branch version
        version_dest = version_src

    else:

        # Processes branch name source version and name
        # from destination branch
        branch_name_src = client_comp.branch_name(
                              branch_type_src,
                              options.version
                          )

        version_src = client_comp.branch_version(
                              branch_type_src,
                              branch_name_src
                          )

        # Destination version is given by user
        version_dest = VersionNumber(
                           options.version,
                           format = version_format_release
                       )

    # Get destination branch name using its version
    branch_name_dest = client_comp.branch_name(
                           branch_type_dest,
                           version_dest
                       )

    if options.verbose:
        print('branch_type_src:', branch_type_src, ',', \
              'branch_name_src:', branch_name_src, ',', \
              'version_src:', str(version_src))

    if ( not client_comp.branch_exists( branch_type_src, branch_name_src ) ):
        print('WARNING:', project + ':' + component, \
              'no', branch_type_src, 'branch found', end=' ')

        if branch_name_src:
            print('with name:', branch_name_src, end=' ')

        if version_src:
            print('for version:', str(version_src), end=' ')

        print()
        continue

    if options.verbose:
        print('branch_type_dest:', branch_type_dest, ',', \
              'branch_name_dest:', branch_name_dest, ',', \
              'version_dest:', str(version_dest))

    # Get the maximum branch name and version
    # for destination branch type. It will allow to check
    # branches consistency.
    if (branch_type_dest == BranchType.BUG_FIX):
        # Only use first version number to get maximum
        # bug_fix branches
        version_dest_len = 1
    else :
        # Only use two first version numbers to get maximum
        # relelase branches
        version_dest_len = 2

    print('Retrieving maximum version for', branch_type_dest, '...', end=' ')
    sys.stdout.flush()
    version_max_dest, \
    branch_name_max_dest = client_comp.branch_version_max(
                               branch_type_dest,
                               str(
                                   version_dest[:version_dest_len]
                               ) + version_dest._format.separator() + '*'
                           )
    print('OK')

    if (not options.force):
        #if client_comp.branch_exists(
                                   #branch_type_dest,
                                   #branch_name_dest
                               #):
            #print(project + ':' + component, \
                #'destination branch:', client_comp.branch_url(
                                        #branch_type_dest,
                                        #branch_name_dest
                                    #), \
                #'already exists. To force branch override' \
                #+ ' uses --force option')
            #sys.exit(1)

        if ( version_src > version_dest) \
        or ( version_src[:version_dest_len] != \
             version_dest[:version_dest_len] ):
            # Checks for inconsistency between source and destination version
            # number. A destination bug_fix branch with version X.Y should
            # always be created from a trunk source branch with trunk with X
            # version and a release branch with version X.Y.Z should always be
            # created from a source branch with version X.Y.
            print(project + ':' + component, \
                'destination branch:', \
                                    client_comp.branch_url(
                                        branch_type_dest,
                                        branch_name_dest
                                    ), 'version (' + str(version_dest) + ')', \
                'should not be created from source branch:', \
                                    client_comp.branch_url(
                                        branch_type_src,
                                        branch_name_src
                                    ), \
                'with a higher version (' + str(version_src) + ')' \
                + '. The destination version should be greater than' \
                + ' or equal to the source version. Moreover the source and' \
                + ' destination branch version must both start with ' \
                + str(version_dest[:version_dest_len]) + '. Version' \
                + ' inconsistencies may exist in project info file.' \
                + '\nUse --force option to force branche creation.')
            sys.exit(1)

        if (version_src <= version_max_dest):
            # Checks for inconsistency between last version number of
            # destination branch type and its matching source version.
            # This can occurs when project info file was not correctly
            # updated after a branch creation.
            print(project + ':' + component, \
                'source branch:', client_comp.branch_url(
                                        branch_type_src,
                                        branch_name_src
                                    ), 'version (' + str(version_src) + ')', \
                'is inconsistent with', \
                'destination branch:', \
                                    client_comp.branch_url(
                                        branch_type_dest,
                                        branch_name_max_dest
                                    ), \
                'version (' + str(version_max_dest) + '). The source version' \
                + ' should always be greater than the existing maximum' \
                + ' destination version.' \
                + '\nUse --force option to force branche creation.')
            sys.exit(1)

    if version_dest >= version_src:
        # It is necessary to set the src version
        # using the increment of the destination
        # branch version
        version_src_new = client_comp.branch_version_inc(
                              branch_type_dest,
                              version_dest
                          )

    else:
        version_src_new = None

    if options.branch:
        action_params = ( branch_type_src,
                          branch_name_src,
                          branch_type_dest,
                          branch_name_dest,
                          'Creating ' + str(version_dest) + ' branch of the '
                        + component + ' component.',
                          options.simulation,
                          options.verbose )

        # Add an action to create the new destination branch
        branch_create_actions.append(
            ( ActionType.BRANCH_CREATE,
              client_comp,
              action_params )
        )

    if options.update:

        # Add an action to update the destination project info file
        action_params = ( branch_type_dest,
                          branch_name_dest,
                          version_dest,
                          'Set version ' + str(version_dest)
                        + ' in project info file for component '
                        + component,
                          options.simulation,
                          options.verbose )

        branch_update_version_info_actions.append(
            ( ActionType.BRANCH_UPDATE_VERSION_INFO,
              client_comp,
              action_params )
        )

        if not version_src_new is None :
            # Add an action to update the source project info file
            action_params = ( branch_type_src,
                              branch_name_src,
                              version_src_new,
                              'Set version ' + str(version_src_new)
                              + ' in project info file for component '
                              + component,
                              options.simulation,
                              options.verbose )

            branch_update_version_info_actions.append(
                ( ActionType.BRANCH_UPDATE_VERSION_INFO,
                client_comp,
                action_params )
            )

        if auto_merge and branch_type_dest in \
            (BranchType.BUG_FIX, BranchType.RELEASE):
            # The project info file changed in the bug_fix branch, this change
            # should be reported in trunk version merge without changing the
            # project info file in trunk version
            if (branch_type_dest == BranchType.BUG_FIX) :
                # Add an action to merge the new destination branch with trunk
                # branch
                action_params = ( branch_type_dest,
                                  branch_name_dest,
                                  BranchType.TRUNK,
                                  None,
                                  'Merge ' + component + ' from '
                                  + branch_type_dest + ' to trunk',
                                  options.simulation,
                                  options.verbose )
            else :
                # Add an action to merge the source branch with trunk
                # branch
                action_params = ( branch_type_src,
                                  branch_name_src,
                                  BranchType.TRUNK,
                                  None,
                                  'Merge ' + component + ' from '
                                  + branch_type_src + ' to trunk',
                                  options.simulation,
                                  options.verbose )

            branch_update_version_info_actions.append(
                ( ActionType.BRANCH_MERGE_VERSION_INFO,
                  client_comp,
                  action_params )
            )

# Execute svn commands
if options.branch:
    if options.verbose:
        print("\n\n** Create branches **")
    for action_type, action_client, action_params in branch_create_actions:
        execute_action( action_type, action_client, action_params )

if options.update:
    if options.verbose:
        print("\n\n** Update branches version info **")
    for action_type, action_client, action_params \
        in branch_update_version_info_actions:
        execute_action( action_type, action_client, action_params )
