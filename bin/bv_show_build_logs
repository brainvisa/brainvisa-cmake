#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import absolute_import, print_function

import os, sys, re
import optparse
import subprocess
from PyQt4 import QtCore, QtGui

from six.moves import range

logfiles = ['/neurospin/brainvisa/build/builds.log']
ssh_remote_host = 'is208611'
ssh_user = ''
tv = None # QTableWidget
status_col = 4


def reload_data():
    global logfiles, tv
    new_logfiles = logfiles

    todel_files = []

    if not os.path.exists(logfiles[0]):
        try:
            neurospin_log = '/tmp/build-neurospin.log'
            print('retreiving neurospin log')
            subprocess.check_call(['scp', '%s%s:%s'
                                  % (ssh_user, ssh_remote_host, logfiles[0]),
                                  neurospin_log])
            todel_files.append(neurospin_log)
            new_logfiles = [neurospin_log]
        except subprocess.CalledProcessError:
            pass

    #try:
        #michael_log = '/tmp/build-michael.log'
        #print('retreiving michael log')
        #subprocess.check_call(['scp',
                              #'%smichael:/home/i2bm-research/builds.log'
                                  #% ssh_user,
                              #michael_log])
        #todel_files = [michael_log]
        #new_logfiles.append(michael_log)
    #except subprocess.CalledProcessError:
        #pass

    r = re.compile('([^ ]+) - build started ([^,]+), stopped (.+) on ([^,]+)')
    r2 = re.compile('^([^ ]+) +step ([^ :]+)(:([^ ]*))?: ([^ ,]+), started: ([^,]+), stopped: (.+) on (.+)$')
    r3 = re.compile('^UNMET DEP.*')

    tv.setSortingEnabled(False)
    tv.clearContents()
    items = []
    for logfile in new_logfiles:
        for i, l in enumerate(open(logfile).readlines()):
            m = r.match(l)
            new_style = False
            if not m or len(m.groups()) != 4:
                m = r2.match(l) # new style
                if not m:
                    if r3.match(l): # unmet dep
                        continue # skip this line
                    else:
                        print(SyntaxError('in file %s, line %d :\n%s'
                                          % (logfile, i, l)))
                        continue
                new_style = True
            if new_style:
                project = ''
                if m.group(4) is not None:
                    project = m.group(4)
                items.append((m.group(6), m.group(7), m.group(2), project,
                              m.group(1), m.group(8), m.group(5)))
            else:
                items.append((m.group(2), m.group(3), 'all', '', m.group(1),
                              m.group(4), ''))
    tv.setRowCount(len(items))
    for i in range(len(items)):
        for j in range(len(items[-i-1])):
            tv.setItem(i, j, QtGui.QTableWidgetItem(items[-i-1][j]))
        if items[-i-1][status_col] in ('Error', 'FAILED', 'INTERRUPTED'):
            tv.item(i, status_col).setBackground( QtGui.QBrush( \
                QtGui.QColor(255, 192, 192)))
        else:
            tv.item(i, status_col).setBackground( QtGui.QBrush( \
                QtGui.QColor(192, 255, 192)))

    tv.sortItems(0, QtCore.Qt.DescendingOrder)
    # tv.sortByColumn( 0, QtCore.Qt.DescendingOrder )
    tv.resizeColumnsToContents()
    tv.setSortingEnabled(True)

    for file in todel_files:
        os.unlink(file)

parser = optparse.OptionParser('Display BrainVisa build logs in a GUI')
parser.add_option('-i', '--input', dest='logfile', action='append',
    help='input log file(s) [default: %s]' % str(logfiles))
parser.add_option('-s', '--ssh', dest='ssh_host',
    help='remote host for ssh access. default: %s. Only used if the log '
    'file cannot be found on the local filesystem.' % ssh_remote_host)
parser.add_option('-u', '--user', dest='user',
    help='user for ssh access. default: not specified, use current one')

options, args = parser.parse_args(sys.argv)
if options.logfile:
    logfiles = options.logfile

if options.ssh_host:
    ssh_remote_host = options.ssh_host

if options.user:
    ssh_user = options.user + '@'

app = QtGui.QApplication(sys.argv)
mw = QtGui.QMainWindow(None)
mw.setWindowTitle('BrainVisa Builds logs')
tv = QtGui.QTableWidget(mw)
mw.setCentralWidget(tv)
tv.setColumnCount(7)
tv.setColumnWidth(0, 200)
tv.setColumnWidth(1, 200)
tv.setColumnWidth(4, 100)
tv.setColumnWidth(5, 100)
tv.setHorizontalHeaderLabels(['start date', 'stop date', 'step', 'project',
                              'status', 'system', 'directory'])
reload_data()

p = mw.menuBar().addMenu('File')
p.addAction(QtGui.QIcon(), 'Reload', reload_data, QtGui.QKeySequence.Refresh)
p.addAction(QtGui.QIcon(), '&Quit', app.quit, QtGui.QKeySequence.Quit)
mw.resize(800, 800)
mw.show()
app.exec_()

