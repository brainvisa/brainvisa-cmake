#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os, sys, re
import optparse
import subprocess
from PyQt4 import QtCore, QtGui

logfiles = ['/home/a-sac-ns-brainvisa/builds.log']
todel_files = []
ssh_user = ''

parser = optparse.OptionParser('Display BrainVisa build logs in a GUI')
parser.add_option('-i', '--input', dest='logfile', action='append',
    help='input log file(s) [default: %s]' % str(logfiles), default=logfiles)
parser.add_option('-u', '--user', dest='user',
    help='user for ssh access. default: not specified, use current one')

options, args = parser.parse_args(sys.argv)
logfiles = options.logfile

if options.user:
    ssh_user = options.user + '@'

if not os.path.exists(logfiles[0]):
    try:
        neurospin_log = '/tmp/build-neurospin.log'
        print 'retreiving neurospin log'
        subprocess.check_call(['scp', '%sis208611:%s'
                               % (ssh_user, logfiles[0]),
                              neurospin_log])
        todel_files.append(neurospin_log)
        logfiles = [neurospin_log]
    except:
        pass

try:
    michael_log = '/tmp/build-michael.log'
    print 'retreiving michael log'
    subprocess.check_call(['scp',
                           '%smichael:/home/i2bm-research/builds.log'
                              % ssh_user,
                           michael_log])
    todel_files = [michael_log]
    logfiles.append(michael_log)
except:
    pass

app = QtGui.QApplication(sys.argv)
mw = QtGui.QMainWindow(None)
mw.setWindowTitle('BrainVisa Builds logs')
tv = QtGui.QTableWidget(mw)
mw.setCentralWidget(tv)
tv.setColumnCount(4)
tv.setColumnWidth(0, 200)
tv.setColumnWidth(1, 200)
tv.setColumnWidth(3, 200)
tv.setHorizontalHeaderLabels(['start date', 'stop date', 'status', 'system',])
tv.setSortingEnabled(True)
r = re.compile('([^ ]+) - build started ([^,]+), stopped (.+) on ([^,]+)')
items = []
for logfile in logfiles:
    for i, l in enumerate(open(logfile).readlines()):
        m = r.match(l)
        if not m or len(m.groups()) != 4:
            raise SyntaxError('in file %s, line %d :\n%s' % (logfile, i, l))
        items.append((m.group(1), m.group(2), m.group(3), m.group(4)))
    tv.setRowCount(len(items))
    for i in xrange(len(items)):
        tv.setItem(i, 2, QtGui.QTableWidgetItem(items[-i-1][0]))
        tv.setItem(i, 0, QtGui.QTableWidgetItem(items[-i-1][1]))
        tv.setItem(i, 1, QtGui.QTableWidgetItem(items[-i-1][2]))
        tv.setItem(i, 3, QtGui.QTableWidgetItem(items[-i-1][3]))
        if items[-i-1][0] == 'Error':
            tv.item(i, 2).setBackground( QtGui.QBrush( \
                QtGui.QColor(255, 192, 192)))
        else:
            tv.item(i, 2).setBackground( QtGui.QBrush( \
                QtGui.QColor(192, 255, 192)))

tv.sortItems(0, QtCore.Qt.DescendingOrder)
# tv.sortByColumn( 0, QtCore.Qt.DescendingOrder )
p = mw.menuBar().addMenu('File')
p.addAction(QtGui.QIcon(), '&Quit', app.quit, QtGui.QKeySequence.Quit)
mw.resize(800, 800)
mw.show()
app.exec_()

for file in todel_files:
    os.unlink(file)
