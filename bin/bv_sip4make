#!/usr/bin/env python
# -*- coding: utf-8 -*-

#  This software and supporting documentation are distributed by
#      Institut Federatif de Recherche 49
#      CEA/NeuroSpin, Batiment 145,
#      91191 Gif-sur-Yvette cedex
#      France
#
# This software is governed by the CeCILL-B license under
# French law and abiding by the rules of distribution of free software.
# You can  use, modify and/or redistribute the software under the
# terms of the CeCILL-B license as circulated by CEA, CNRS
# and INRIA at the following URL "http://www.cecill.info".
#
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability.
#
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or
# data to be ensured and,  more generally, to use and operate it in the
# same conditions as regards security.
#
# The fact that you are presently reading this means that you have had
# knowledge of the CeCILL-B license and that you accept its terms.

from __future__ import print_function
from __future__ import absolute_import
import os
import os.path as osp
import sys
import shutil
import tempfile
import string
import re
from six.moves import range
try:
    import subprocess32 as subprocess
except ImportError:
    import subprocess

# print('SIP options:', sys.argv)
sys.stdout.flush()

# find -S option for sip command specified
try:
    sipopt = sys.argv.index('-S')
except ValueError:
    sipopt = -1
if sipopt == len(sys.argv) - 1:
    sipopt = -1
if sipopt >= 0:
    sipcmd = sys.argv[sipopt + 1]
    del sys.argv[sipopt + 1], sys.argv[sipopt]
elif sys.platform.startswith('win'):
    sipcmd = 'sip.exe'
else:
    sipcmd = 'sip'

sip6 = False
if osp.basename(sipcmd).startswith('sip-build'):
    sip6 = True

print('bv_si4make, sip6:', sip6)

try:
    copt = sys.argv.index('-c')
except ValueError:
    copt = -1
if copt < 0:
    # print('-c option not found. Running sip normally')
    pass
elif copt == len(sys.argv) - 1:
    # print('no argument to -c option. Running sip normally')
    pass
    copt = -1
if copt >= 0:
    outdir = sys.argv[copt + 1]
    if sip6:
        del sys.argv[copt]
        del sys.argv[copt]

# find -j option
try:
    ijopt = sys.argv.index('-j')
except ValueError:
    ijopt = -1
if ijopt == len(sys.argv) - 1:
    ijopt = -1
if ijopt >= 0:
    jopt = int(sys.argv[ijopt + 1])

if sip6:
    del sys.argv[ijopt]
    del sys.argv[ijopt]

# if --listingOnly, display only the generated source list
try:
    listingOnly = sys.argv.index('--listingOnly')
    sys.argv.remove('--listingOnly')
except ValueError:
    listingOnly = -1

if copt < 0:
    sys.exit(subprocess.call([sipcmd] + sys.argv[1:]) >> 8)

if sip6:
    # sip 6 works very differently

    if not os.path.exists(outdir):
        os.makedirs(outdir)
    tdir = tempfile.mkdtemp()
    old_dir = shutil.copytree(outdir, osp.join(tdir, 'sip'), symlinks=True,
                              ignore_dangling_symlinks=True)
    # call SIP-build
    # print(sipcmd + ' "' + string.join( sys.argv[1:], '" "' ) + '"')
    res = subprocess.call([sipcmd] + sys.argv[1:])
    new_dir = outdir

else:

    tdir = tempfile.mkdtemp()
    new_dir = tdir
    old_dir = outdir
    # print('temp dir:', tdir)
    # print('output dir:', outdir)
    sys.argv[copt + 1] = tdir

    # call SIP
    # print(sipcmd + ' "' + string.join( sys.argv[1:], '" "' ) + '"')
    res = subprocess.call([sipcmd] + sys.argv[1:])
    if not os.path.exists(outdir):
        os.mkdir(outdir)


def skipcomment(f):
    try:
        for i in range(5):
            l = f.readline()  # for now I know it's 5 lines...
    except IOError:
        # if fewer than 5 lines
        pass

print('new_dir:', new_dir)
print('old_dir:', old_dir)

if os.path.isdir(new_dir):
    tlist = os.listdir(new_dir)
else:
    tlist = []

if listingOnly != -1:
    print(";".join(tlist))
    res = 1

if res == 0:

    # compare files
    olist = os.listdir(old_dir)
    ccfiles = []

    # create empty files if -j option is used and not enough files were
    # generated
    if jopt > 0:
        for x in tlist:
            if x.endswith('.cc') or x.endswith('.cpp'):
                ccfiles.append(x)
        r = re.compile(r'^(.*part)([0-9]+)\.(cpp|cc)$')
        indices = set()
        base = ''
        ext = ''
        for x in ccfiles:
            m = r.match(x)
            if m:
                i = int(m.group(2))
                indices.add(i)
                if base == '':
                    base = m.group(1)
                    ext = m.group(3)
        for i in range(jopt):
            if i not in indices:
                # write an empty file
                fname = base + str(i) + '.' + ext
                # print('adding empty file', fname)
                open(os.path.join(new_dir, fname), 'w')
                tlist.append(fname)

    line_re = re.compile('^#line ([0-9]+) ".*"$')

    for x in tlist:
        if x not in olist:
            print(x, 'is a new file')
            if new_dir != outdir:
                shutil.copyfile(os.path.join(new_dir, x),
                                os.path.join(outdir, x))
        else:
            tf = open(os.path.join(new_dir, x))
            of = open(os.path.join(old_dir, x))
            # skip initial comments
            skipcomment(tf)
            skipcomment(of)
            diff = 0
            for l in tf:
                ol = of.readline()
                if l != ol:
                    is_line_macro = line_re.match(l)
                    if is_line_macro:
                        is_other_line_macro = line_re.match(ol)
                        if not is_other_line_macro \
                                or is_line_macro.group(1) \
                                    != is_other_line_macro.group(1):
                            diff = 1
                            break
                    else:
                        diff = 1
                        break
            if not diff:
                ol = of.readline()
                if ol != '':
                    diff = 1
            tf.close()
            of.close()
            if diff:
                print(x, 'differs')
                if outdir != new_dir:
                    shutil.copyfile(
                        os.path.join(new_dir, x), os.path.join(outdir, x))
            else:
                print(x, 'is the same.')
                if outdir == new_dir:
                    # copy stats from original
                    shutil.copystat(os.path.join(old_dir, x),
                                    os.path.join(outdir, x))

    # cleanup obsolete files
    for x in olist:
        if x not in tlist and (x.endswith('.h') or x.endswith('.cc')
                               or x.endswith('.cpp') or x.endswith('.hpp')):
            # keep files of size 0 since they may be here intentionnally.
            print(x, 'is obsolete')
            os.unlink(os.path.join(outdir, x))

# delete temp directory
shutil.rmtree(tdir)

# print('SIP exit code:', res)
if res & 0xff == 0:
    res = res >> 8
else:
    print('Error: sip exited with signal', res, file=sys.stderr)
sys.exit(res)
