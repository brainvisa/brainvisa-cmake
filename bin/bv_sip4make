#!/usr/bin/env python
# -*- coding: utf-8 -*-

#  This software and supporting documentation are distributed by
#      Institut Federatif de Recherche 49
#      CEA/NeuroSpin, Batiment 145,
#      91191 Gif-sur-Yvette cedex
#      France
#
# This software is governed by the CeCILL-B license under
# French law and abiding by the rules of distribution of free software.
# You can  use, modify and/or redistribute the software under the 
# terms of the CeCILL-B license as circulated by CEA, CNRS
# and INRIA at the following URL "http://www.cecill.info". 
#
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability.
#
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or 
# data to be ensured and,  more generally, to use and operate it in the 
# same conditions as regards security.
#
# The fact that you are presently reading this means that you have had
# knowledge of the CeCILL-B license and that you accept its terms.


import os, sys, shutil, tempfile, string

# print 'SIP options:', sys.argv
sys.stdout.flush()
try:
  copt = sys.argv.index( '-c' )
except:
  copt = -1
if copt < 0:
  # print '-c option not found. Running sip normally'
  pass
elif copt == len(sys.argv)-1:
  # print 'no argument to -c option. Running sip normally'
  pass
  copt = -1

# if --listingOnly, display only the generated source list
try:
  listingOnly = sys.argv.index( '--listingOnly' )
  sys.argv.remove('--listingOnly')
except:
  listingOnly = -1

sipcmd = 'sip'
if sys.platform.startswith( 'win' ):
  sipcmd = 'sip.exe'

if copt < 0:
  sys.exit( os.system( sipcmd + ' "' + string.join( sys.argv[1:], '" "' ) \
                       + '"' ) >> 8 )

outdir = sys.argv[ copt+1 ]

tdir = tempfile.mkdtemp()
# print 'temp dir:', tdir
# print 'output dir:', outdir
sys.argv[ copt+1 ] = tdir

# call SIP
res = os.system( sipcmd + ' "' + string.join( sys.argv[1:], '" "' ) + '"' )
if not os.path.exists( outdir ):
  os.mkdir( outdir )

def skipcomment( f ):
  for i in xrange(5):
    l = f.readline() # for now I know it's 5 lines...

if os.path.isdir( tdir ):
  tlist = os.listdir( tdir )
else:
  tlist = []

if listingOnly != -1:
    print ";".join(tlist)
    res = 1

if res == 0:

  # compare files
  olist = os.listdir( outdir )

  for x in tlist:
    if x not in olist:
      print x, 'is a new file'
      shutil.copyfile( os.path.join( tdir, x ), os.path.join( outdir, x ) )
    else:
      tf = open( os.path.join( tdir, x ) )
      of = open( os.path.join( outdir, x ) )
      # skip initial comments
      skipcomment( tf )
      skipcomment( of )
      diff = 0
      for l in tf.xreadlines():
        ol = of.readline()
        if l != ol:
          diff = 1
          break
      if not diff:
        ol = of.readline()
        if ol != '':
          diff = 1
      tf.close()
      of.close()
      if diff:
        print x, 'differs'
        shutil.copyfile( os.path.join( tdir, x ), os.path.join( outdir, x ) )

  # cleanup obsolete files
  for x in olist:
    if x not in tlist and ( x.endswith( '.h' ) or x.endswith( '.cc' ) or x.endswith( '.cpp' ) or x.endswith( '.hpp' ) ):
      print x, 'is obsolete'
      os.unlink( os.path.join( outdir, x ) )

# delete temp directory
for x in tlist:
  os.unlink( os.path.join( tdir, x ) )
if os.path.isdir( tdir ):
  os.rmdir( tdir )

# print 'SIP exit code:', res
if res & 0xff == 0:
  res = res >> 8
else:
  print >> sys.stderr, 'Error: sip exited with signal', res
sys.exit( res )

