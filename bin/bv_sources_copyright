#! /usr/bin/env python
# -*- coding: utf-8 -*-

#  This software and supporting documentation are distributed by
#      Institut Federatif de Recherche 49
#      CEA/NeuroSpin, Batiment 145,
#      91191 Gif-sur-Yvette cedex
#      France
#
# This software is governed by the CeCILL-B license under
# French law and abiding by the rules of distribution of free software.
# You can  use, modify and/or redistribute the software under the 
# terms of the CeCILL-B license as circulated by CEA, CNRS
# and INRIA at the following URL "http://www.cecill.info". 
#
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability.
#
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or 
# data to be ensured and,  more generally, to use and operate it in the 
# same conditions as regards security.
#
# The fact that you are presently reading this means that you have had
# knowledge of the CeCILL-B license and that you accept its terms.

from __future__ import absolute_import, print_function

import sys, os, re
from optparse import OptionParser
import six

from six.moves import range

parser = OptionParser( version="%prog 1.1",
  usage="usage: %prog [options] -t <file_type> <files_or_directories>" )
parser.set_defaults( type='unknown', show=False, replace=None, backupSuffix='~', extensions=[], perforce=False )
parser.add_option( '-t', '--type',
                   metavar="<type>", dest="type",
                   help='Files type (possible values: python, c++)' ),
parser.add_option( '-s', '--show',
                   action='store_true', dest='show',
                   help='Classify the files according to their headers and display the result.' )
parser.add_option( '-r', '--replace',
                   metavar="<header_file>", dest="replace",
                   help='Replace the header of <files> by the content of <header_file>.' )
parser.add_option( '-e', '--extensions',
                   metavar="<extensions>", dest="extions",
                   help='When directories are parsed, only files with the given extensions (i.e. file name ends with one of the extension) are read. If no extension is given, a default extensions set is provided according to <type> (python --> .py, c++ --> .cc .hh .cpp .hpp .c .h .C .H .cxx .hxx).' )
parser.add_option( '-b', '--backup',
                   metavar="<suffix>", dest="backupSuffix",
                   help='Suffix appened to the backup file. If empty, no backup is done. [default="~"]' ),
parser.add_option( '-p', '--perforce',
                   action='store_true', dest='perforce',
                   help='Call "p4 open <file_name>" before modifying a file.' )

(options, filesOrDirectories) = parser.parse_args()

if not filesOrDirectories:
  parser.print_help()
  sys.exit()

def checkPythonScript( filename ):
  if filename.endswith( '~' ) or filename.endswith( '%' ):
    return False
  ext = os.path.basename( filename ).split( '.' )
  if len( ext ) > 1 and ext[-1].lower() != 'py':
    return False
  f = open( filename )
  interp = re.compile( '^\s*\#\!.*python$' )
  comment = re.compile( '(^\s*$)|(^\s*\#.*$)' )
  for l in f:
    if interp.match( l ):
      return True
    if not comment.match( l ):
      return False

def findFileNames( files_or_directories, extensions ):
  stack = []
  for f in files_or_directories:
    if os.path.isdir( f ):
      stack.append( f )
    else:
      yield f
      
  while stack:
    d = stack.pop()
    for f in [os.path.join( d, x ) for x in os.listdir( d )]:
      if os.path.isdir( f ):
        stack.append( f )
      else:
        for e in extensions:
          if f.endswith( e ) or (e == '.py' and checkPythonScript( f ) ):
            yield f
            break

class HeaderClassifier:
  def separateHeaders( self, fileNames ):
    result = {}
    for f in fileNames:
      headerStart = 0
      header = ''
      headerstarted = False
      file = open( f )
      ctype = None
      for line in file:
        if not headerstarted:
          if self.ignoreAtBegining.match( line ):
            headerStart += 1
            continue
          else:
            headerstarted = True
            for ct in self.commentTypes:
              if ct.headerFirstLine.match( line ):
                header = line
                ctype = ct
                break
        else:
          if ctype and ctype.headerMiddleLine.match( line ):
            header += line
            if ctype.headerLastLine and ctype.headerLastLine.match( line ):
              break
          else:
            break
      file.close()
      result.setdefault( header, [] ).append( ( f, headerStart ) )
    return result
  
  def printHeaders( headers, file=sys.stdout ):
    for header, fileInfos in six.iteritems(headers):
      print('-=' * 40)
      print(header)
      print('-=' * 40)
      print('-->', ' '.join( ["'" + x[0] + "'" for x in fileInfos] ))
      print()
  printHeaders = staticmethod( printHeaders )

  def replaceHeaders( headers, newHeaderFileName ):
    newHeader = open( newHeaderFileName ).read()
    for header, fileInfos in six.iteritems(headers):
      for f, headerStart in fileInfos:
        newFile = ''
        file = open( f )
        for i in range( headerStart ):
          newFile += file.readline()
        file.read( len( header ) )
        newFile += newHeader
        postHeader = file.read()
        newFile += postHeader
        file.close()
        if options.backupSuffix:
          file = open( f + options.backupSuffix, 'w' )
          file2 = open( f )
          file.write( file2.read() )
          file2.close()
          file.close()
        if options.perforce:
          print('!before!', "p4 open '" + f + "'")
          os.system( "p4 open '" + f + "'" )
          print('!after!', "p4 open '" + f + "'")
        file = open( f, 'w' )
        file.write( newFile )
  replaceHeaders = staticmethod( replaceHeaders )

class CommentType:
  pass

class PythonCommentType( CommentType ):
  headerFirstLine = re.compile( r'^#.*' )
  headerMiddleLine = headerFirstLine
  headerLastLine = None

class CCommentType( CommentType ):
  headerFirstLine = re.compile( r'^[ \t]*(/\*).*' )
  headerMiddleLine = re.compile( r'^^(\*/)*' )
  headerLastLine = re.compile( r'^.*\*/.*' )

class CppCommentType( CommentType ):
  headerFirstLine = re.compile( r'^[ \t]*(//).*' )
  headerMiddleLine = headerFirstLine
  headerLastLine = None

class PythonHeaderClassifier( HeaderClassifier ):
  ignoreAtBegining = re.compile( r'^((\#\!.*)' \
    r'|(\# -\*- coding:.*-\*-)' \
    r'|([ \t]*))$' )

  commentTypes = [ PythonCommentType() ]

class CppHeaderClassifier( HeaderClassifier ):
  ignoreAtBegining = re.compile( r'^(([ \t]*))$' )

  commentTypes = [ CCommentType(), CppCommentType() ]

class CppOldHeaderClassifier( CppHeaderClassifier ):
  '''Temporary class to change many existing headers'''
  
  def separateHeaders( self, fileNames ):
    aimsHeader = re.compile( r'^[ \t\n]*/\*[ \t\n]*\*[ \t\n]*Copyright[^\n]*CEA.*' )
    result = {}
    for header, fileInfos in six.iteritems(CppHeaderClassifier.separateHeaders(self, fileNames)):
      if aimsHeader.match( header ):
        result[ header ] = fileInfos
    return result
  
  if False:
    def separateHeaders( self, fileNames ):  # noqa: F811
      result = {}
      aimsHeader = re.compile( r'[ \t\n]*/\*[ \t\n]*\*[ \t\n]*Copyright.*' )
      idLine = re.compile( r'^\s*\*\s*\$Id.*' )
      commentLine = re.compile( r'^\s*\*\s*[^\s].*$' )
      emptyCommentLine = re.compile( r'^\s*\*/?\s*$' )
      franceLine = re.compile( r'^\s*\*\s*France\s*$' )
      for header, fileInfos in six.iteritems(CppHeaderClassifier.separateHeaders( self, fileNames)):
        headerSize = len( header )
        if aimsHeader.match( header ):
          l = header.split( '\n' )
          while l and not l[-1]: l = l[:-1]
          lastLine = ''
          commentEnd = 0
          for line in reversed( l ):
            commentEnd -= 1
            if emptyCommentLine.match( line ):
              if not lastLine:
                lastLine = line
              continue
            elif idLine.match( line ):
              continue
            hasComment = not bool( franceLine.match( line ) )
            break
          if hasComment:
            commentStart = commentEnd
            for line in reversed( l[ :commentEnd ] ):
              if not commentLine.match( line ):
                break
              commentStart -= 1
            headerEnd = commentStart
            for line in reversed( l[ :commentStart ] ):
              headerEnd -= 1
              if not commentLine.match( line ):
                break
            header = '\n'.join( l[:headerEnd] + [ lastLine ] )
            comment = '\n'.join( [ l[0] ] + l[ commentStart : commentEnd+1 ] + [ lastLine ] )
            result.setdefault( header, {} )[ comment ] = [ (f,n,headerSize) for f,n in fileInfos ]
          else:
            result.setdefault( header, {} )[ None ] = [ (f,n,headerSize) for f,n in fileInfos ]
        else:
          result.setdefault( None, {} )[ None ] = fileInfos
      return result
  
    def printHeaders( headers, file=sys.stdout ):
      for header, commentsAndfileInfos in six.iteritems(headers):
        print('-=' * 40)
        print(header)
        print('-=' * 40)
        first = True
        for comment, fileInfos in six.iteritems(commentsAndfileInfos):
          if not first:
            print('- ' * 40)
          if comment:
            print(comment)
          print('-->', ' '.join( ["'" + x[0] + "'" for x in fileInfos] ))
          first = False
        print()
    printHeaders = staticmethod( printHeaders )
  
    def replaceHeaders( headers, newHeaderFileName ):
      newHeader = open( newHeaderFileName ).read()
      for header, commentsAndfileInfos in six.iteritems(headers):
        if header is None: continue
        for comment, fileInfos in six.iteritems(commentsAndfileInfos):
          for f, headerStart, headerSize in fileInfos:
            newFile = ''
            file = open( f )
            for i in range( headerStart ):
              newFile += file.readline()
            file.read( headerSize )
            newFile += newHeader
            if comment:
              newFile += '\n' + comment
            postHeader = file.read()
            newFile += postHeader
            file.close()
            if options.backupSuffix:
              file = open( f + options.backupSuffix, 'w' )
              file2 = open( f )
              file.write( file2.read() )
              file2.close()
              file.close()
            if options.perforce:
              os.system( "p4 open '" + f + "'" )
            file = open( f, 'w' )
            file.write( newFile )
    replaceHeaders = staticmethod( replaceHeaders )

if options.type == 'python':
  if not options.extensions:
    options.extensions = [ '.py' ]
  classifier = PythonHeaderClassifier()
elif options.type == 'c++':
  if not options.extensions:
    options.extensions = [ '.cc', '.hh', '.cpp', '.hpp', '.c', '.h', '.C', '.H', '.cxx', '.hxx' ]
  classifier = CppHeaderClassifier()
elif options.type == 'old':
  if not options.extensions:
    options.extensions = [ '.cc', '.hh', '.cpp', '.hpp', '.c', '.h', '.C', '.H', '.cxx', '.hxx' ]
  classifier = CppOldHeaderClassifier()
else:
  raise parser.error( 'Invalid file type: ' + options.type )

if not options.replace:
  options.show = True

headers = classifier.separateHeaders( findFileNames( filesOrDirectories, options.extensions ) )

if options.show:
  classifier.printHeaders( headers )

if options.replace:
  classifier.replaceHeaders( headers, options.replace )
