#! /usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function
import sys, os, string, types, glob
from optparse import OptionParser

parser = OptionParser( usage='%prog [options] name [name...]', 
  version='%prog 1.0',
  description = 'Look for files in environment variables containing paths. ' \
    'Both the found file name and the real file name (without any symbolic ' \
    'link in its path) are displayed. It is possible to use shell-like ' \
    'patterns for name to find.' )
parser.add_option( '-v', '--variable',
                   action='append', type='string', dest='variables', default=[],
                   help = 'Adds a path environment variable. If none is given, PATH, LD_LIBRARY_PATH and PYTHONPATH are used. ' )
options, args = parser.parse_args()
if len( args ) < 1:
  parser.error( 'Invalid arguments. Try "' + sys.argv[ 0 ] + ' --help" to get some help.' )

def split_path( p ):
  result = []
  a,b = os.path.split( p )
  while a and b:
    result.insert( 0, b )
    a,b = os.path.split( a )
  if a:
    result.insert( 0, a )
  else:
    result.insert( 0, b )
  return result
  
def no_link( p ):
  s = split_path( p )
  p=''
  while s:
    p = os.path.join( p, s.pop( 0 ) )
    while os.path.islink(p):
      d,f = os.path.split(p)
      p = os.path.normpath( os.path.join( d, os.readlink( p ) ) )
  return p

def findInPath( name, path ):
  if type( path ) is types.StringType:
    path = string.split( path, ':' )
  for p in path:
    for fp in glob.glob( os.path.join( p, name ) ):
      yield fp

variables = options.variables
if not variables:
  variables = ( 'PATH', 'LD_LIBRARY_PATH', 'PYTHONPATH' )
for n in args:
  for v in variables:
    p = os.environ.get( v )
    if p is not None:
      for f in  findInPath( n, p ):
        rf = no_link( f )
        if rf != f: f = f + ' ( ' + rf + ' )'
        print(v + ': ' + f)