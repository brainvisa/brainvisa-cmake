#!/usr/bin/env python
# -*- coding: utf-8 -*-

#  This software and supporting documentation are distributed by
#      Institut Federatif de Recherche 49
#      CEA/NeuroSpin, Batiment 145,
#      91191 Gif-sur-Yvette cedex
#      France
#
# This software is governed by the CeCILL-B license under
# French law and abiding by the rules of distribution of free software.
# You can  use, modify and/or redistribute the software under the 
# terms of the CeCILL-B license as circulated by CEA, CNRS
# and INRIA at the following URL "http://www.cecill.info". 
#
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability.
#
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or 
# data to be ensured and,  more generally, to use and operate it in the 
# same conditions as regards security.
#
# The fact that you are presently reading this means that you have had
# knowledge of the CeCILL-B license and that you accept its terms.

from __future__ import absolute_import, print_function

import os
from optparse import OptionParser
import shlex
import sys


def system( *args ):
  print(' '.join( args ))
  return os.system( *args )

class SubversionClient( object ):
  def __init__( self, directory, username='' ):
    self.directory = os.path.normpath( os.path.abspath( directory ) )
    self.username = username

  def assertValidClient( self ):
    # the directory given in parameters can be <client>/<subdirs>, the command is then applied only to a part of the client : the client paths that starts with <subdirs>
    repositoryDirectory = os.path.join( self.directory, '.repository' )
    curDir = self.directory
    base=""
    found=False
    while (not found) and (curDir !=""):
      repositoryDirectory = os.path.join( curDir, '.repository' )
      if os.path.isdir( repositoryDirectory ):
        found=True
        self.clientDirectory=curDir
        self.subDirectory=base
        #print("client directory ", self.clientDirectory)
        #print("subdirectory ", self.subDirectory)
      else:
        # os.path.dirname("/") = "/" but os.basename("/") = "", so I use split and check the basename to avoid loops
        (curDir, base)=os.path.split(curDir)
        if (base==""):
          curDir=""
    if not found:
      raise RuntimeError( 'Invalid client directory: ' + self.directory  )

  def svncommand( self, cmdarg ):
    cmd = cmdarg
    if self.username:
      cmd += ' --username ' + self.username
    system( cmd )

  def create( self ):
    repositoryDirectory = os.path.join( self.directory, '.repository' )
    os.makedirs( repositoryDirectory )
    system( 'svnadmin create "' + repositoryDirectory + '"' )
    self.svncommand( 'svn checkout "file://' + os.path.splitdrive(repositoryDirectory)[1].replace(os.path.sep, "/") + '" "' + self.directory + '"' )


  def edit( self ):
    self.assertValidClient()
    self.svncommand( 'svn propedit svn:externals "' + self.clientDirectory + '"' )
    self.svncommand( 'svn commit -m "" "' + self.clientDirectory + '"' )

  def show( self ):
    self.assertValidClient()
    self.svncommand( 'svn propget svn:externals "' + self.clientDirectory + '"' )

  def getClientPaths(self):
    externals=os.popen( 'svn propget svn:externals "'+ self.clientDirectory +'"' )
    for line in externals.readlines():
      line=line.strip() # remove \n
      if ((line != "") and (line[0] != "#")): # ignore comments
        lineSplitted=line.split()
        if len(lineSplitted) == 2:
          clientDir=lineSplitted[0]
          clientPath=os.path.join(self.clientDirectory, clientDir)
          if (os.path.isdir(clientPath) and (clientDir.startswith(self.subDirectory))):
            yield clientPath

  def getClientAndServerPaths(self):
    externals=os.popen( 'svn propget svn:externals "'+ self.clientDirectory +'"' )
    for line in externals.readlines():
      line=line.strip() # remove \n
      if ((line != "") and (line[0] != "#")): # ignore comments
        lineSplitted=line.split()
        if len(lineSplitted) == 2:
          clientDir=lineSplitted[0]
          clientPath=os.path.join(self.clientDirectory, clientDir)
          if (os.path.isdir(clientPath) and (clientDir.startswith(self.subDirectory))):
            yield ( clientPath, lineSplitted[1] )

  def commit( self, message=None ):
    self.assertValidClient()
    for clientPath in self.getClientPaths():
      if not message:
        raise NotImplementedError( 'Input of commit message not implemented. Use -m option.' )
      print('Commit clientPath : ', clientPath)
      self.svncommand( 'svn commit "' + clientPath + '" -m "' + message + '"')

  def status( self ):
    self.assertValidClient()
    for clientPath in self.getClientPaths():
      self.svncommand( 'svn status "' + clientPath + '"' )

  def revisionAndRepository( self, path, revstring='Revision:' ):
    lang = os.getenv( 'LANG', '' )
    os.environ[ 'LANG' ] = 'C'
    info = os.popen( 'svn info "' + path + '"' )
    rev = None
    repo = None
    reprootstring = 'Repository Root:'
    for l in info:
      l = l.strip()
      if l.startswith( reprootstring ):
        repo = l[len(reprootstring)+1:]
      elif l.startswith( revstring ):
        rev = int( l[len(revstring)+1:] )
        break
    info.close()
    if lang:
      os.environ[ 'LANG' ] = lang
    else:
      del os.environ[ 'LANG' ]
    return rev, repo

  def update( self ):
    self.assertValidClient()
    servers = {}
    for clientPath, serverPath in self.getClientAndServerPaths():
      doupdate = True
      rext, repo = self.revisionAndRepository( clientPath )
      if rext is not None and repo is not None:
        rev = servers.get( repo, None )
        if rev is None:
          rev, repo = self.revisionAndRepository( repo, revstring='Last Changed Rev:' )
          servers[ repo ] = rev
        if rev is not None and rext >= rev:
          doupdate = False # up to date
          print(clientPath, 'is up-to-date.')
      if doupdate:
        #print('svn update "' + clientPath + '"')
        self.svncommand( 'svn update "' + clientPath + '"' )

usage = '''%prog <sub-command> [options] [parameters]

This command enables to create a custom client for a subversion repository. You can choose the subdirectories of the repository that you want to see in your client.
First, create the client directory using %prog create DIRECTORY.
Then, choose the content of your client using %prog edit [DIRECTORY]. This opens an editor with the current list of directories of the client. The format of the file is: <client path> <repository path>. Comment lines begin with #.
Update the client using svn update [DIRECTORY].

This command creates a local repository with an externals property that defines links to the actual repository. If there are several directory levels in the client definition, only the last directory is a work copy where svn commands are directory usable. But if you want to execute svn commands in all the client or in an intermediate directory of the client, you can use some %prog options like: %prog commit|ci [DIRECTORY] [-m MESSAGE].
       
       %prog create DIRECTORY
       %prog edit [DIRECTORY]
       %prog show [DIRECTORY]
       %prog commit|ci [DIRECTORY] -m MESSAGE
       %prog status|st [DIRECTORY]
       %prog update|up [DIRECTORY]
      
DIRECTORY can be a subdirectory of the client directory.

In order to work, the commands svn and svnadmin must be installed on your system. On some Linux systems they are in two separate packages (e.g. subversion and subversion-tools).'''
parser = OptionParser(usage=usage)
parser.add_option( '-m', '--message', dest='message',
                   help='specify log message for commit', metavar='MESSAGE',
                   default='' )
parser.add_option( '--username', dest='username',
                   help='specify user login to use with the svn server',
                   metavar='USERNAME', default='' )
(options, args) = parser.parse_args()
if len( args ) == 0:
  parser.error( 'No command provided' )
elif len( args ) > 2:
  parser.error( 'Too many options' )
command = args[ 0 ]

if command == 'create':
  if len( args ) < 2:
    parser.error( 'Missing directory name' )
  else:
    if options.message:
      print('warning: spurious -m option, ignored.', file=sys.stderr)
    client = SubversionClient( args[ 1 ], username=options.username )
    client.create()
else:
  if len( args ) < 2:
    client = SubversionClient( os.curdir, username=options.username )
  else:
    client = SubversionClient(  args[ 1 ], username=options.username )
  if command == 'edit':
    client.edit()
  elif command == 'ci' or command == 'commit':
    client.commit( options.message )
  elif command == 'status' or command == 'st':
    client.status()
  elif command == 'update' or command == 'up':
    client.update()
  elif command == 'show':
    client.show()
  else:
    parser.error( 'Invalid command: %s' % command )

