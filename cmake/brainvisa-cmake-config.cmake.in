cmake_policy( SET CMP0011 NEW )
cmake_policy( SET CMP0009 NEW )

# Include code specific to a platform or site
if( EXISTS /etc/mandriva-release )
  include( "${brainvisa-cmake_DIR}/specific/linux_distribution/mandriva.cmake" )
elseif( EXISTS /etc/lsb-release )
  file( READ /etc/lsb-release _x )
  string( REGEX MATCH Ubuntu _x "${_x}" )
  if( _x )
    include( "${brainvisa-cmake_DIR}/specific/linux_distribution/ubuntu.cmake" )
  endif()
endif()
file( GLOB _files "${brainvisa-cmake_DIR}/specific/*.cmake" )
foreach( _file ${_files} )
  include( "${_file}" )
endforeach()

set( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${brainvisa-cmake_DIR}/modules" )
if( WIN32 AND CMAKE_CROSSCOMPILING )
  link_directories( "${BRAINVISA_CROSSCOMPILATION_DIR}/windows/lib" "${BRAINVISA_CROSSCOMPILATION_DIR}/windows/bin" )
endif( WIN32 AND CMAKE_CROSSCOMPILING )

# Requires CPack for its argument parsing macro
include( CPack )

# Initialize default package type
option( BRAINVISA_PACKAGING "Create rules for packaging" OFF )
mark_as_advanced( BRAINVISA_PACKAGING )
set( BRAINVISA_PACKAGE_TYPE "deb" CACHE STRING "Type of package to create. Possible values are \"deb\" or \"tar.bz2\"." )
mark_as_advanced( BRAINVISA_PACKAGE_TYPE )
if( BRAINVISA_PACKAGING )
  if( NOT DEFINED BRAINVISA_PACKAGE_SUFFIX )
    execute_process( COMMAND systemIdentification 
      OUTPUT_VARIABLE output OUTPUT_STRIP_TRAILING_WHITESPACE
      RESULT_VARIABLE result )
    if( output AND result EQUAL 0 )
      set( BRAINVISA_PACKAGE_SUFFIX "${output}" )
    else()
      set( BRAINVISA_PACKAGE_SUFFIX "${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR}" )
    endif()
    set( BRAINVISA_PACKAGE_SUFFIX "${BRAINVISA_PACKAGE_SUFFIX}" CACHE STRING "Suffix for system identification in generated packages name" )
  endif()
  include( "${brainvisa-cmake_DIR}/packaging-${BRAINVISA_PACKAGE_TYPE}.cmake" )
endif()

# 
# BRAINVISA_SYSTEM_PATH_TO_LIST
#   Convert a path stored in a system environment variable into a cmake list.
#
# Usage:
#  BRAINVISA_SYSTEM_PATH_TO_LIST( <output variable> <system path> )
#
# Example:
#   BRAINVISA_SYSTEM_PATH_TO_LIST( PATH "$ENV{PATH}" )
#   foreach( p ${PATH} )
#     message( ${p} )
#   endforeach( p ${PATH} )
function( BRAINVISA_SYSTEM_PATH_TO_LIST  result_variable_name system_path )
  if( NOT WIN32 )
    string( REPLACE ":" ";" system_path "${system_path}" )
  endif( NOT WIN32 )
  set( ${result_variable_name} "${system_path}" PARENT_SCOPE )
endfunction( BRAINVISA_SYSTEM_PATH_TO_LIST  result_variable_name system_path )


macro( BRAINVISA_FIND_PACKAGE component )
  if( ${component}_IS_BEING_COMPILED AND NOT ${component}_BINARY_DIR )
    set( args "${ARGN}" )
    list( REMOVE_ITEM args REQUIRED ) # We do not want CMake to display an error and stop here
    list( REMOVE_ITEM args QUIET ) # Avoid to use QUIET twice
    find_package( "${component}" ${args} QUIET )
    if( NOT ${component}_FOUND )
      if( NOT BRAINVISA_FIND_FAILED_${component} )
        set( BRAINVISA_FIND_FAILED_${component} TRUE CACHE INTERNAL "" )
        message( SEND_ERROR "BrainVISA component ${component} has to be configured before it can be imported by ${BRAINVISA_PACKAGE_NAME}. Configure one more time to get rid of this error." )
      endif()
    endif()
  else()
    find_package( "${component}" ${ARGN} )
  endif()
endmacro()

macro( BRAINVISA_PROJECT )
  include( "${CMAKE_CURRENT_SOURCE_DIR}/project_info.cmake" )
  if( NOT DEFINED BRAINVISA_PACKAGE_VERSION )
    set( BRAINVISA_PACKAGE_VERSION "${BRAINVISA_PACKAGE_VERSION_MAJOR}.${BRAINVISA_PACKAGE_VERSION_MINOR}.${BRAINVISA_PACKAGE_VERSION_PATCH}" )
  endif()

  # Get optional arguments for the brainvisa project
  IF ( ${ARGC} EQUAL 0 )
    SET( BRAINVISA_PROJECT_LANGUAGES CXX )
  ELSE ( ${ARGC} EQUAL 0 )
    SET( BRAINVISA_PROJECT_LANGUAGES ${ARGN} )
  ENDIF ( ${ARGC} EQUAL 0 )

  project( ${BRAINVISA_PACKAGE_NAME} ${BRAINVISA_PROJECT_LANGUAGES} )
  
  set( ${PROJECT_NAME}_VERSION_MAJOR ${BRAINVISA_PACKAGE_VERSION_MAJOR} )
  set( ${PROJECT_NAME}_VERSION_MINOR ${BRAINVISA_PACKAGE_VERSION_MINOR} )
  set( ${PROJECT_NAME}_VERSION_PATCH ${BRAINVISA_PACKAGE_VERSION_PATCH} )
  set( ${PROJECT_NAME}_VERSION "${BRAINVISA_PACKAGE_VERSION}" )
  set( ${PROJECT_NAME}_VERSION_MAJOR ${BRAINVISA_PACKAGE_VERSION_MAJOR} PARENT_SCOPE )
  set( ${PROJECT_NAME}_VERSION_MINOR ${BRAINVISA_PACKAGE_VERSION_MINOR} PARENT_SCOPE )
  set( ${PROJECT_NAME}_VERSION_PATCH ${BRAINVISA_PACKAGE_VERSION_PATCH} PARENT_SCOPE )
  set( ${PROJECT_NAME}_VERSION "${BRAINVISA_PACKAGE_VERSION}" PARENT_SCOPE )

  include( CPack )
  
  set( ${PROJECT_NAME}_TARGET_COUNT 0 CACHE INTERNAL "Used to generate new targets" )
  BRAINVISA_CREATE_MAIN_COMPONENTS()
  
  set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin )
  set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib )
  
  # Initialize dependency variables
  if( "${BRAINVISA_PACKAGE_TYPE}" STREQUAL "deb" )
    foreach( pack_type RUN DEV STR DOC )
      foreach( dependency_type DEPENDS RECOMMENDS SUGGESTS ENHANCES )
        unset( ${BRAINVISA_PACKAGE_NAME}_DEB_${pack_type}_${dependency_type} CACHE )
      endforeach()
    endforeach()
  endif()
endmacro( BRAINVISA_PROJECT )


function( BRAINVISA_CREATE_MAIN_COMPONENTS )
  if( NOT BRAINVISA_MAIN_COMPONENTS_CREATED )
    set( BRAINVISA_MAIN_COMPONENTS_CREATED true PARENT_SCOPE )
    unset( BRAINVISA_EXTERNAL_COMPONENTS CACHE )
    BRAINVISA_ADD_COMPONENT_GROUP( runtime
                                   DISPLAY_NAME "Runtime"
                                   DESCRIPTION "All elements necessary to use ${PROJECT_NAME} at runtime without developpement files such as C++ headers." )
    BRAINVISA_ADD_COMPONENT_GROUP( devel
                                   DISPLAY_NAME "Developpement"
                                   DESCRIPTION "All elements necessary to compile libraries and programs that uses ${PROJECT_NAME} (such as C++ headers)." )
    BRAINVISA_ADD_COMPONENT_GROUP( doc
                                   DISPLAY_NAME "Documentation"
                                   DESCRIPTION "All documentations: doxygen, epydoc, etc." )
    add_dependencies( install-devel install-runtime )
    add_custom_target( doc )
    add_dependencies( install-doc doc )
    add_custom_target( install-nodoc )
    add_dependencies( install-nodoc install-runtime install-devel )

  endif( NOT BRAINVISA_MAIN_COMPONENTS_CREATED )

  BRAINVISA_ADD_COMPONENT( ${PROJECT_NAME}
                           GROUP runtime
                           DESCRIPTION "runtime files for ${PROJECT_NAME}" )
  BRAINVISA_ADD_COMPONENT( ${PROJECT_NAME}-devel 
                           GROUP devel
                           DESCRIPTION "Developpement files for ${PROJECT_NAME}"
                           DEPENDS ${PROJECT_NAME} )
  BRAINVISA_ADD_COMPONENT( ${PROJECT_NAME}-doc
                           GROUP doc
                           DESCRIPTION "Documentation of ${PROJECT_NAME}" )
  add_custom_target( ${PROJECT_NAME}-doc )
  add_dependencies( doc ${PROJECT_NAME}-doc )
endfunction()


# BRAINVISA_DEPENDENCY
# Usage:
#   BRAINVISA_DEPENDENCY( <package type> <dependency type> <component> <component package type> [ <version ranges> ] [BINARY_INDEPENDENT] )
#
# Examples:
#   BRAINVISA_DEPENDENCY( RUN DEPENDS libblitz RUN "2.0.3-4" )
#   BRAINVISA_DEPENDENCY( DEV DEPENDS libblitz DEV ">= 2.0" )
#   BRAINVISA_DEPENDENCY( RUN RECOMMENDS dcmtk RUN "3.1.2" )
#   BRAINVISA_DEPENDENCY( DEV RECOMMENDS dcmtk DEV )
#   BRAINVISA_DEPENDENCY( RUN DEPENDS soma-io RUN "3.2.4-20100908" )
#   BRAINVISA_DEPENDENCY( DEV DEPENDS soma-io DEV ">= 3.2.0;<< 3.3.0" )
#   BRAINVISA_DEPENDENCY( RUN DEPENDS soma-base RUN ">= 3.2.0;<< 3.3.0" BINARY_INDEPENDENT )
#   BRAINVISA_DEPENDENCY( DEV DEPENDS soma-base DEV ">= 3.2.0;<< 3.3.0" )
#
function( BRAINVISA_DEPENDENCY pack_type dependency_type component component_pack_type  )
  # Parse optional arguments
  if( "${ARGV4}" STREQUAL "BINARY_INDEPENDENT" )
    set( binary_independent TRUE )
    set( version_ranges )
  else()
    if( ARGV4 )
      if( "${ARGV5}" STREQUAL "BINARY_INDEPENDENT" )
        set( binary_independent TRUE )
      else()
        set( binary_independent FALSE )
      endif()
      set( version_ranges "${ARGV4}" )
    else()
      set( binary_independent FALSE )
      set( version_ranges )
    endif()
  endif()
      
  if( BRAINVISA_DEPENDENCY_GRAPH )
    if( "${pack_type}" STREQUAL "RUN" )
      set( sourceNodeLabel "${BRAINVISA_PACKAGE_NAME}" )
    else()
       set( sourceNodeLabel  )
#      string( TOLOWER "${pack_type}" sourceNodeLabel )
#      set( sourceNodeLabel "${BRAINVISA_PACKAGE_NAME}-${sourceNodeLabel}" )
    endif()
    if( "${component_pack_type}" STREQUAL "RUN" )
      set( destNodeLabel "${component}" )
    else()
      set( destNodeLabel )
#      string( TOLOWER "${pack_type}" destNodeLabel )
#      set( destNodeLabel "${component}-${destNodeLabel}" )
    endif()
  endif()

  # Check if component is external or not
  list( FIND BRAINVISA_COMPONENTS "${component}" result )
  if( result EQUAL -1 )
    # Component is not in BRAINVISA_COMPONENTS, it is considered as an external component
    set( destNodeAttributes ", color=orange" )
    if( BRAINVISA_PACKAGING )
      if( EXISTS "${brainvisa-cmake_DIR}/brainvisa-packaging-${BRAINVISA_PACKAGE_TYPE}-${component}.cmake" )
        include( "${brainvisa-cmake_DIR}/brainvisa-packaging-${BRAINVISA_PACKAGE_TYPE}-${component}.cmake" )
        if( "${component_pack_type}" STREQUAL "RUN" )
          BRAINVISA_PACKAGING_RUN( "${pack_type}" "${dependency_type}" "${component}" "${component_pack_type}" "${version_ranges}" "${binary_independent}" )
        elseif( "${component_pack_type}" STREQUAL "DEV" )
          BRAINVISA_PACKAGING_DEV( "${pack_type}" "${dependency_type}" "${component}" "${component_pack_type}" "${version_ranges}" "${binary_independent}" )
        elseif( "${component_pack_type}" STREQUAL "DOC" )
          BRAINVISA_PACKAGING_DOC( "${pack_type}" "${dependency_type}" "${component}" "${component_pack_type}" "${version_ranges}" "${binary_independent}" )
        elseif( "${component_pack_type}" STREQUAL "DEVDOC" )
          BRAINVISA_PACKAGING_DEVDOC( "${pack_type}" "${dependency_type}" "${component}" "${component_pack_type}" "${version_ranges}" "${binary_independent}" )
        elseif( "${component_pack_type}" STREQUAL "SRC" )
          BRAINVISA_PACKAGING_SRC( "${pack_type}" "${dependency_type}" "${component}" "${component_pack_type}" "${version_ranges}" "${binary_independent}" )
        endif()
      else()
        # Default behavior to allow adding dependencies on extenal components even if the file for packaging this component does not exists.
         if( "${component_pack_type}" STREQUAL "RUN" )
           set( deb_package "${component}" )
           set( deb_version_ranges "${version_ranges}" )
        elseif( "${component_pack_type}" STREQUAL "DEV" )
           set( deb_package "${component}-dev" )
           set( deb_version_ranges "${version_ranges}" )
        endif()
      endif()
    endif()
  else()
    # Component is a brainvisa-cmake component
    set( destNodeAttributes )
    if( BRAINVISA_PACKAGING )
      if( "${BRAINVISA_PACKAGE_TYPE}" STREQUAL "deb" )
        unset( deb_package )
        unset( deb_version_ranges )
        if( "${component_pack_type}" STREQUAL "RUN" )
          set( deb_package "${component}" )
        elseif( "${component_pack_type}" STREQUAL "DEV" )
          set( deb_package "${component}-dev" )
        elseif( "${component_pack_type}" STREQUAL "SRC" )
          set( deb_package "${component}-src" )
        elseif( "${component_pack_type}" STREQUAL "DOC" )
          set( deb_package "${component}-doc" )
        elseif( "${component_pack_type}" STREQUAL "DEVDOC" )
          set( deb_package "${component}-dev-doc" )
        else()
          message( SEND_ERROR "Unknown component package type \"${component_pack_type}\"" )
        endif()
      endif()
      set( deb_version_ranges "${version_ranges}" )
    endif()
    
    # Reorder BRAINVISA_COMPONENTS to be sure that all dependencies of a 
    # component are configured before configuring the component itself.
    list( FIND BRAINVISA_COMPONENTS "${BRAINVISA_PACKAGE_NAME}" indexSource )
    list( FIND BRAINVISA_COMPONENTS "${component}" indexDest )
    if( indexDest GREATER ${indexSource} )
      list( REMOVE_AT BRAINVISA_COMPONENTS ${indexDest} )
      list( INSERT BRAINVISA_COMPONENTS ${indexSource} "${component}" )
      set( BRAINVISA_COMPONENTS "${BRAINVISA_COMPONENTS}" CACHE STRING "" FORCE )
      set( _BRAINVISA_COMPONENTS "${BRAINVISA_COMPONENTS}" CACHE INTERNAL "" )
    endif()
  endif()

  if( BRAINVISA_DEPENDENCY_GRAPH )
    if( sourceNodeLabel AND destNodeLabel )
      list( FIND BRAINVISA_DEPENDENCY_NODES ${sourceNodeLabel} sourceNode )
      if( sourceNode EQUAL -1 )
        list( LENGTH BRAINVISA_DEPENDENCY_NODES sourceNode )
        set( BRAINVISA_DEPENDENCY_NODES ${BRAINVISA_DEPENDENCY_NODES} "${sourceNodeLabel}" CACHE STRING INTERNAL FORCE )
        file( APPEND "${BRAINVISA_DEPENDENCY_GRAPH}" "${sourceNode} [ label=\"${sourceNodeLabel}\" ]\n" )
      endif()

      list( FIND BRAINVISA_DEPENDENCY_NODES ${destNodeLabel} destNode )
      if( destNode EQUAL -1 )
        list( LENGTH BRAINVISA_DEPENDENCY_NODES destNode )
        set( BRAINVISA_DEPENDENCY_NODES ${BRAINVISA_DEPENDENCY_NODES} "${destNodeLabel}" CACHE STRING INTERNAL FORCE )
        file( APPEND "${BRAINVISA_DEPENDENCY_GRAPH}" "${destNode} [ label=\"${destNodeLabel}\"${destNodeAttributes} ]\n" )
      endif()
      
      if( "${dependency_type}" STREQUAL "DEPENDS" )
        file( APPEND "${BRAINVISA_DEPENDENCY_GRAPH}" "${sourceNode} -> ${destNode}\n" )
      elseif( "${dependency_type}" STREQUAL "RECOMMENDS" )
        file( APPEND "${BRAINVISA_DEPENDENCY_GRAPH}" "${sourceNode} -> ${destNode} [ color=green ]\n" )
      else()
        file( APPEND "${BRAINVISA_DEPENDENCY_GRAPH}" "${sourceNode} -> ${destNode} [ color=blue ]\n" )
      endif()
    endif()
  endif()
  
  if( BRAINVISA_PACKAGING )
    if( "${BRAINVISA_PACKAGE_TYPE}" STREQUAL "deb" )
      # Add deb dependency to the appropriate variable
      if ( deb_version_ranges )
        foreach( range ${deb_version_ranges} )
          set( ${PROJECT_NAME}_DEB_${pack_type}_${dependency_type} ${${PROJECT_NAME}_DEB_${pack_type}_${dependency_type}} "${deb_package}( ${range} )" )
        endforeach()
      else()
        set( ${PROJECT_NAME}_DEB_${pack_type}_${dependency_type} ${${PROJECT_NAME}_DEB_${pack_type}_${dependency_type}} "${deb_package}" )
      endif()
    endif()
    set( ${PROJECT_NAME}_DEB_${pack_type}_${dependency_type} "${${PROJECT_NAME}_DEB_${pack_type}_${dependency_type}}" CACHE STRING INTERNAL FORCE )
  endif()
endfunction()


# BRAINVISA_SET_PROJECT_VERSION
#   Read the VERSION file in "${PROJECT_SOURCE_DIR} and parse it to set the
#   following variables:
#     ${PROJECT_NAME}_VERSION = full version string (i.e. VERSION file content)
#     ${PROJECT_NAME}_VERSION_MAJOR = major version number (i.e. first number)
#     ${PROJECT_NAME}_VERSION_MINOR = minor version number (i.e. second number)
#     ${PROJECT_NAME}_VERSION_PATCH = patch version number (if any)
#   The following variables are also set with the same values as above:
#     BRAINVISA_CURRENT_PROJECT_VERSION
#     BRAINVISA_CURRENT_PROJECT_VERSION_MAJOR
#     BRAINVISA_CURRENT_PROJECT_VERSION_MINOR
#     BRAINVISA_CURRENT_PROJECT_VERSION_PATCH
#
# Usage:
#   BRAINVISA_SET_PROJECT_VERSION()
MACRO( BRAINVISA_SET_PROJECT_VERSION )
  SET( _versionVar ${PROJECT_NAME}_VERSION )
  IF( NOT DEFINED ${_versionVar} )
    FILE( READ "${PROJECT_SOURCE_DIR}/VERSION" _version )
    STRING( REGEX REPLACE "([^\n]*)\n" "\\1" _version "${_version}")
    STRING( REGEX REPLACE "([^.]+)\\.([^.]+)(\\.(.*))?" "\\1" _version_major "${_version}")
    STRING( REGEX REPLACE "([^.]+)\\.([^.]+)(\\.(.*))?" "\\2" _version_minor "${_version}")
    STRING( REGEX REPLACE "([^.]+)\\.([^.]+)\\.?(.*)" "\\3" _version_patch "${_version}")

    SET( ${_versionVar} ${_version} )
    SET( ${_versionVar}_MAJOR ${_version_major} )
    SET( ${_versionVar}_MINOR ${_version_minor} )
    SET( ${_versionVar}_PATCH ${_version_patch} )

    SET( BRAINVISA_CURRENT_PROJECT_VERSION  ${${_versionVar}} )
    SET( BRAINVISA_CURRENT_PROJECT_VERSION_MAJOR ${${_versionVar}_MAJOR} )
    SET( BRAINVISA_CURRENT_PROJECT_VERSION_MINOR ${${_versionVar}_MINOR} )
    SET( BRAINVISA_CURRENT_PROJECT_VERSION_PATCH ${${_versionVar}_PATCH} )
  ENDIF( NOT DEFINED ${_versionVar} )
ENDMACRO( BRAINVISA_SET_PROJECT_VERSION )


function( BRAINVISA_GENERATE_TARGET_NAME _variableName )
  if( DEFINED ${PROJECT_NAME}_TARGET_COUNT )
    math( EXPR ${PROJECT_NAME}_TARGET_COUNT ${${PROJECT_NAME}_TARGET_COUNT}+1 )
    set( ${PROJECT_NAME}_TARGET_COUNT ${${PROJECT_NAME}_TARGET_COUNT} CACHE INTERNAL "Used to generate new targets" )
  else( DEFINED ${PROJECT_NAME}_TARGET_COUNT )
    set( ${PROJECT_NAME}_TARGET_COUNT 1 CACHE INTERNAL "Used to generate new targets" )
  endif( DEFINED ${PROJECT_NAME}_TARGET_COUNT )
  set( ${_variableName} ${PROJECT_NAME}_target_${${PROJECT_NAME}_TARGET_COUNT} PARENT_SCOPE )
endfunction( BRAINVISA_GENERATE_TARGET_NAME )


# BRAINVISA_GET_FILE_LIST_FROM_PRO
#   Retrieve one (or more) list of file names from an *.pro file. This macro
#   exists for backward compatibility with build-config.
#
# Usage:
#   BRAINVISA_GET_FILE_LIST_FROM_PRO( <pro file name> <pro variable> <cmake variable> [<pro variable> <cmake variable>...] )
#
# Example:
#   BRAINVISA_GET_FILE_LIST_FROM_PRO(  ${CMAKE_CURRENT_SOURCE_DIR}/libvip.pro "HEADERS" _h "SOURCES" _s )
#
MACRO( BRAINVISA_GET_FILE_LIST_FROM_PRO _proFilename)
  file(READ "${_proFilename}" _var)
  # remove lines starting with '#'
  string(REGEX REPLACE "#[^\n]*\n" "" _var "${_var}")
  string(REGEX REPLACE "[ \t]*\\\\ *\n[ \t]*" " " _var "${_var}")
  
  SET( _args ${ARGN})
  LIST( LENGTH _args _i )
  WHILE( ${_i} GREATER 0 )
    LIST( GET _args 0 _proVariable )
    LIST( GET _args 1 _cmakeVariable )
    LIST( REMOVE_AT _args 0 1 )
    STRING( REGEX REPLACE "(.*\n)?${_proVariable}[ \t]*\\+?=[ \t]*([^\n]*)\n.*" "\\2" ${_cmakeVariable} "${_var}" )
    SEPARATE_ARGUMENTS( ${_cmakeVariable} )
#     MESSAGE( "${_proVariable} : ${${_cmakeVariable}}" )
    LIST( LENGTH _args _i )
  ENDWHILE( ${_i} GREATER 0 )
ENDMACRO( BRAINVISA_GET_FILE_LIST_FROM_PRO )


# BRAINVISA_COPY_AND_INSTALL_HEADERS
#
# Usage:
#   BRAINVISA_COPY_AND_INSTALL_HEADERS( <headers list> <include directory> <install component> )
#
# Example:
#
function( BRAINVISA_COPY_AND_INSTALL_HEADERS _headersVariable _includeDir targetVariable )
  set( destHeaders )
  foreach( _currentHeader ${${_headersVariable}} )
    add_custom_command( 
      OUTPUT "${CMAKE_BINARY_DIR}/include/${_includeDir}/${_currentHeader}"
      DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/${_currentHeader}"
      COMMAND "${CMAKE_COMMAND}" -E copy "${CMAKE_CURRENT_SOURCE_DIR}/${_currentHeader}" "${CMAKE_BINARY_DIR}/include/${_includeDir}/${_currentHeader}" )
    set( destHeaders ${destHeaders}  "${CMAKE_BINARY_DIR}/include/${_includeDir}/${_currentHeader}" )
    get_filename_component( _path "${_currentHeader}" PATH )
    BRAINVISA_INSTALL( FILES ${_currentHeader}
                       DESTINATION include/${_includeDir}/${_path}
                       COMPONENT ${PROJECT_NAME}-devel )
  endforeach()
  BRAINVISA_GENERATE_TARGET_NAME( target )
  add_custom_target( ${target} ALL
                     DEPENDS ${destHeaders} )
  set( ${targetVariable} "${target}" PARENT_SCOPE )
endfunction()


# BRAINVISA_COPY_FILES
#
# Usage:
#  BRAINVISA_COPY_FILES( <component> <source files> [SOURCE_DIRECTORY <directory>] DESTINATION <destination directory>  [IMMEDIATE] [GET_TARGET <target variable>] )
#
function( BRAINVISA_COPY_FILES component )
  set( _files "${ARGN}" )
  
  # Read GET_TARGET option
  list( FIND _files GET_TARGET result )
  if( result EQUAL -1 )
    set( targetVariable )
  else()
    list( REMOVE_AT _files ${result} )
    list( GET _files ${result} targetVariable )
    list( REMOVE_AT _files ${result} )
  endif()

  # Read DESTINATION option
  list( FIND _files DESTINATION result )
  if( result EQUAL -1 )
    message( FATAL_ERROR "DESTINATION argument is mandatory for BRAINVISA_COPY_FILES" )
  else()
    list( REMOVE_AT _files ${result} )
    list( GET _files ${result} _destination )
    list( REMOVE_AT _files ${result} )
  endif()

  # Read SOURCE_DIRECTORY option
  list( FIND _files SOURCE_DIRECTORY result )
  if( result EQUAL -1 )
    set( _sourceDirectory )
  else()
    list( REMOVE_AT _files ${result} )
    list( GET _files ${result} _sourceDirectory )
    list( REMOVE_AT _files ${result} )
  endif()

  # Read IMMEDIATE option
  list( FIND _files IMMEDIATE result )
  if( result EQUAL -1 )
    set( immediate FALSE )
  else()
    set( immediate TRUE )
    list( REMOVE_AT _files ${result} )
  endif()
    
  
#     message( "=== copy: from ${_sourceDirectory} to ${_destination} : ${_files}" )
  set( _targetDepends  )
  foreach( _file ${_files} )
    if( IS_ABSOLUTE "${_file}" )
      set( _absoluteFile "${_file}"  )
      set( _path )
      get_filename_component( _file "${_file}" NAME )
    elseif( _sourceDirectory )
      set( _absoluteFile "${_sourceDirectory}/${_file}"  )
      get_filename_component( _path "${_file}" PATH )
    else()
      set( _absoluteFile "${CMAKE_CURRENT_SOURCE_DIR}/${_file}"  )
      get_filename_component( _path "${_file}" PATH )
    endif()
    if( EXISTS "${_absoluteFile}" )
      if( immediate )
        configure_file( "${_absoluteFile}"
                        "${CMAKE_BINARY_DIR}/${_destination}/${_file}"
                        COPYONLY )
      else()
        add_custom_command( 
          OUTPUT "${CMAKE_BINARY_DIR}/${_destination}/${_file}"
          DEPENDS "${_absoluteFile}"
          COMMAND "${CMAKE_COMMAND}" -E copy "${_absoluteFile}" "${CMAKE_BINARY_DIR}/${_destination}/${_file}" )
      endif()
      BRAINVISA_INSTALL( PROGRAMS "${_absoluteFile}"
                         DESTINATION "${_destination}/${_path}"
                         COMPONENT  ${component} )
      set( _targetDepends ${_targetDepends} "${CMAKE_BINARY_DIR}/${_destination}/${_file}" )
    else()
      message( "Warning: file \"${_absoluteFile}\" does not exists" )
    endif()
  endforeach()

  BRAINVISA_GENERATE_TARGET_NAME( target )
  add_custom_target( ${target} ALL
                     DEPENDS ${_targetDepends} )
  if( targetVariable )
    set( ${targetVariable} "${target}" PARENT_SCOPE )
  endif()
endfunction()


# BRAINVISA_COPY_DIRECTORY
#  Recursively copy and install all files in <source directory> except files named
#  CMakeLists.txt or *~.
#
# Usage:
#  BRAINVISA_COPY_DIRECTORY( <source directory> <destination directory> <component> [IMMEDIATE] [GET_TARGET <target variable>] )
#
function( BRAINVISA_COPY_DIRECTORY _directory _destination _component )
  set( _argn "${ARGN}" )
  
  # Read IMMEDIATE option
  list( FIND _argn IMMEDIATE result )
  if( result EQUAL -1 )
    set( immediate FALSE )
  else()
    set( immediate TRUE )
    list( REMOVE_AT _argn ${result} )
  endif()
  
  # Read GET_TARGET option
  list( FIND _argn GET_TARGET result )
  if( result EQUAL -1 )
    set( targetVariable )
  else()
    list( REMOVE_AT _argn ${result} )
    list( GET _argn ${result} targetVariable )
    list( REMOVE_AT _argn ${result} )
  endif()
  
  file( GLOB_RECURSE _selectedFiles RELATIVE "${_directory}" "${_directory}/*" )
  set( i 0 )
  list( LENGTH _selectedFiles l )
  while( ${i} LESS ${l} )
    list( GET _selectedFiles ${i} file )
    get_filename_component( f "${file}" NAME )
    string( REGEX MATCH "(CMakeLists\\.txt)|(.*~)|(.*\\.svn/.*)$" _match "${file}" )
    if( _match )
      list( REMOVE_AT _selectedFiles ${i} )
      math( EXPR l "${l} - 1" )
    else()
      math( EXPR i "${i} + 1" )
    endif()
  endwhile()
  if( immediate )
    BRAINVISA_COPY_FILES( ${_component} ${_selectedFiles} SOURCE_DIRECTORY "${_directory}" DESTINATION "${_destination}" IMMEDIATE GET_TARGET "${targetVariable}" )
  else()
    BRAINVISA_COPY_FILES( ${_component} ${_selectedFiles} SOURCE_DIRECTORY "${_directory}" DESTINATION "${_destination}" GET_TARGET "${targetVariable}" )
  endif()
endfunction()


# BRAINVISA_COPY_PYTHON_DIRECTORY
#   Create targets to copy, byte compile and install all Python code
#   contained in a directory.
#
# Usage:
#   BRAINVISA_COPY_PYTHON_DIRECTORY( <python directory> <component> 
#                               <destination directory> )
#     <python directory>: python directory to copy
#     <component>: name of the component passed to BRAINVISA_INSTALL.
#     <destination directory>: directory where the wiles will be copied
#         (relative to build directory).
#   BRAINVISA_COPY_PYTHON_DIRECTORY( <python directory> <component> )
#     <destination directory> is set to the right most directory name in
#         <python directory>
#
# Example:
#   BRAINVISA_COPY_PYTHON_DIRECTORY(  ${CMAKE_CURRENT_SOURCE_DIR}/python brainvisa_python )
#
function( BRAINVISA_COPY_PYTHON_DIRECTORY _pythonDirectory _component )
  if( ${ARGC} GREATER 2 )
    set( _destDir "${ARGV2}" )
  else( ${ARGC} GREATER 2 )
    get_filename_component( _destDir "${_pythonDirectory}" NAME )
  endif( ${ARGC} GREATER 2 )

  # Make sure Python can be executed
  if( NOT DEFINED PYTHON_EXECUTABLE )
    find_package( PythonInterp REQUIRED )
  endif( NOT DEFINED PYTHON_EXECUTABLE )
  
  # Read source directory and separate Python sources (*.py) from other files
  set( _pythonSources )
  set( _nonPythonSources )
  file( GLOB_RECURSE _files RELATIVE "${_pythonDirectory}" "${_pythonDirectory}/*" )
  foreach( _i ${_files} )
    get_filename_component( _f ${_i} NAME )
    string( REGEX MATCH "(CMakeLists\\.txt)|(.*~)|(.*\\.svn/.*)|(.*\\.pyo)|(.*\\.pyc)$" _match "${_i}" )
    if( NOT _match )
      string( REGEX MATCH ".*\\.py$" _match ${_f} )
      if( _match )
        set( _pythonSources ${_pythonSources} ${_i} )
      else( _match )
        set( _nonPythonSources ${_nonPythonSources} ${_i} )
      endif( _match )
    endif( NOT _match )
  endforeach( _i ${_files} )

  # List containing all source files and also byte compiled files in the build directory
  set( _targetDepends )

  # Copy or symlink Python sources
  foreach(_file ${_pythonSources})
    # Copy the source file in build directory
    set( _fileBuild "${CMAKE_BINARY_DIR}/${_destDir}/${_file}" )
    if( UNIX OR APPLE )
      # Make a symlink instead of copying Python source allows to
      # execute code from the build tree and directly benefit from
      # modifications in the source tree (without typing make)
      get_filename_component( _path "${_fileBuild}" PATH )
      add_custom_command( OUTPUT "${_fileBuild}"
                          COMMAND "${CMAKE_COMMAND}" -E make_directory "${_path}"
                          COMMAND "${CMAKE_COMMAND}" -E create_symlink "${_pythonDirectory}/${_file}" "${_fileBuild}"
                          DEPENDS "${_pythonDirectory}/${_file}" )
    else()
      add_custom_command( OUTPUT "${_fileBuild}"
                          COMMAND "${CMAKE_COMMAND}" -E copy "${_pythonDirectory}/${_file}" "${_fileBuild}"
                          DEPENDS "${_pythonDirectory}/${_file}" )
    endif()

    # Byte compile python code (creating *.pyc and *.pyo)
    add_custom_command( OUTPUT "${_fileBuild}c"
                        COMMAND "${PYTHON_EXECUTABLE}" -c "import py_compile\\;py_compile.main\\(\\)" "${_fileBuild}"
                        DEPENDS "${_fileBuild}" )
    add_custom_command( OUTPUT "${_fileBuild}o"
                        COMMAND "${PYTHON_EXECUTABLE}" -O -c "import py_compile\\;py_compile.main\\(\\)" "${_fileBuild}"
                        DEPENDS "${_fileBuild}" )
  
    # Install source file and byte compiled files
    get_filename_component( _path "${_file}" PATH )
    BRAINVISA_INSTALL( FILES "${_pythonDirectory}/${_file}" "${_fileBuild}c" "${_fileBuild}o"
                       DESTINATION "${_destDir}/${_path}"
                       COMPONENT ${_component} )
    set( _targetDepends ${_targetDepends} "${_fileBuild}" "${_fileBuild}c" "${_fileBuild}o" )
  endforeach(_file ${_pythonSources})

  # Copy other files
  foreach(_file ${_nonPythonSources})
    set( _fileBuild "${CMAKE_BINARY_DIR}/${_destDir}/${_file}" )
    add_custom_command( OUTPUT "${_fileBuild}"
      COMMAND ${CMAKE_COMMAND} -E copy "${_pythonDirectory}/${_file}" "${_fileBuild}"
      DEPENDS "${_pythonDirectory}/${_file}" )
    # Install source file and byte compiled files
    get_filename_component( _path "${_file}" PATH )
    BRAINVISA_INSTALL( FILES "${_pythonDirectory}/${_file}"
                       DESTINATION ${_destDir}/${_path}
                       COMPONENT ${_component} )
    set( _targetDepends ${_targetDepends} "${_fileBuild}" )
  endforeach(_file ${_nonPythonSources})


  # Make a target that depends on all files that must be copied or generated
  # Is there a better way to force files creation ?
  BRAINVISA_GENERATE_TARGET_NAME( _target )
  add_custom_target( ${_target} ALL
                     DEPENDS ${_targetDepends} )
endfunction()


# BRAINVISA_INSTALL_DIRECTORY
#   Install a directory without copying it into the build tree.
# Usage:
#   BRAINVISA_INSTALL_DIRECTORY <directory> <destination> <component> )
#
# Example:
#  BRAINVISA_INSTALL_DIRECTORY( "/usr/lib/python2.6" "python" "brainvisa-python" )
function( BRAINVISA_INSTALL_DIRECTORY directory destination component )
  file( GLOB_RECURSE allFiles RELATIVE "${directory}" FOLLOW_SYMLINKS "${directory}/*" )
  foreach( file ${allFiles} )
    get_filename_component( path "${file}" PATH )
    get_filename_component( name "${file}" NAME )
    if( EXISTS "${directory}/${path}/${name}" )
      BRAINVISA_INSTALL( PROGRAMS "${directory}/${path}/${name}"
        DESTINATION "${destination}/${path}"
        COMPONENT "${component}" )
    else()
      message( "Warning: file \"${directory}/${path}/${name}\" does not exists (probably an invalid link)" )
    endif()
  endforeach()
endfunction()


# BRAINVISA_GET_SPACED_QUOTED_LIST
#   Transform a list into a string containing space separated items. Each item
#   is surounded by double quotes.
#
# Usage:
#  BRAINVISA_GET_SPACED_QUOTED_LIST( <list variable> <output variable> )
#
# Example:
#   SET( _list a b "c d" )
#   BRAINVISA_GET_SPACED_QUOTED_LIST( _list _quotedList )
#   # equivalent to SET( _quotedList "\"a\" \"b\" \"c d\"" )
MACRO( BRAINVISA_GET_SPACED_QUOTED_LIST _listVariable _outputVariable )
  SET( _list ${${_listVariable}} )
  SET( ${_outputVariable} )
  LIST( LENGTH _list _length )
  IF( _length GREATER 0 )
    LIST( GET _list 0 _item )
    LIST( REMOVE_AT _list 0 )
    STRING( REPLACE "\"" "\\\"" _item ${_item}  )
    SET( ${_outputVariable} "\"${_item}\"" )
    FOREACH( _item ${_list} )
      STRING( REPLACE "\"" "\\\"" _item ${_item}  )
      SET( ${_outputVariable} "${${_outputVariable}} \"${_item}\"" )
    ENDFOREACH( _item ${list} )
  ENDIF( _length GREATER 0 )
ENDMACRO( BRAINVISA_GET_SPACED_QUOTED_LIST _listVariable _outputVariable )


# BRAINVISA_GENERATE_DOXYGEN_DOC
#    Add rules to generate doxygen documentation with "make doc".
#
# Usage:
#   BRAINVISA_GENERATE_DOXYGEN_DOC( <input_variable> [<file to copy> ...] )
#   <input_variable>: variable containing a string or a list of input sources. 
#                     Its content will be copied in the INPUT field of the 
#                     Doxygen configuration file.
#  <file to copy>: file (relative to ${CMAKE_CURRENT_SOURCE_DIR}) to copy in
#                  the build tree. Files are copied in ${DOXYGEN_BINARY_DIR}
#                  if defined, otherwise they are copied in 
#                  ${PROJECT_BINARY_DIR}/doxygen. The doxygen configuration
#                  file is generated in the same directory.
#
#   Before calling this macro, it is possible to specify values that are going
#   to be written in doxygen configuration file by setting variable names
#   DOXYFILE_<doxyfile variable name>. For instance, in order to set project
#   name in Doxygen, one should use 
#   SET( DOXYFILE_PROJECT_NAME, "My wonderful project" ).
#
# Example:
#     FIND_PACKAGE( Doxygen )
#     IF ( DOXYGEN_FOUND )
#       INCLUDE( SomaMacros )
#       SET( DOXYFILE_HTML_HEADER "\"${DOXYGEN_BINARY_DIR}/head_vip.html\"" )
#       SET( DOXYFILE_OPTIMIZE_OUTPUT_FOR_C YES )
#       SET( DOXYFILE_BUILTIN_STL_SUPPORT NO )
#       FILE( READ "${DOXYGEN_BINARY_DIR}/doxygenInput" _doxygenInput )
#       BRAINVISA_GENERATE_DOXYGEN_DOC( _doxygenInput head_vip.html vip.gif )
#     ENDIF ( DOXYGEN_FOUND )
MACRO( BRAINVISA_GENERATE_DOXYGEN_DOC _inputVariable )
  IF( DOXYGEN_FOUND )
    IF( DEFINED DOXYGEN_BINARY_DIR )
      SET( _doxygenBinaryDir "${DOXYGEN_BINARY_DIR}" )
    ELSE( DEFINED DOXYGEN_BINARY_DIR )
      SET( _doxygenBinaryDir "${PROJECT_BINARY_DIR}/doxygen" )
    ENDIF( DEFINED DOXYGEN_BINARY_DIR )
  
    # If files in _inputVariable are relative, make them absolute
    list( GET ${_inputVariable} 0 _item )
    if( NOT EXISTS "${_item}" )
      set( _newList )
      foreach( _item ${${_inputVariable}} )
        set( _newList ${_newList} "${CMAKE_CURRENT_SOURCE_DIR}/${item}" )
      endforeach( _item ${${_inputVariable}} )
      BRAINVISA_GET_SPACED_QUOTED_LIST( _newList _input )
    else( NOT EXISTS "${_item}" )
      BRAINVISA_GET_SPACED_QUOTED_LIST( ${_inputVariable} _input )
    endif( NOT EXISTS "${_item}" )

    SET( DOXYFILE_INPUT "${_input}" )
    INCLUDE( "${brainvisa-cmake_DIR}/DoxyfileDefaultValues.cmake" )

    SET( _generatedFiles )
    FOREACH( _file ${ARGN} )
      CONFIGURE_FILE( "${CMAKE_CURRENT_SOURCE_DIR}/${_file}" 
                      "${_doxygenBinaryDir}/${_file}"
                      COPYONLY )
      CONFIGURE_FILE( "${CMAKE_CURRENT_SOURCE_DIR}/${_file}" 
                      "${DOXYFILE_HTML_OUTPUT}/${_file}"
                      COPYONLY )
      SET( _generatedFiles ${_generatedFiles} "${DOXYFILE_HTML_OUTPUT}/${_file}" "${_doxygenBinaryDir}/${_file}" )
    ENDFOREACH( _file ${ARGN} )
  
    CONFIGURE_FILE( "${brainvisa-cmake_DIR}/Doxyfile.in" "${_doxygenBinaryDir}/Doxyfile" @ONLY )
    BRAINVISA_GENERATE_TARGET_NAME( _target )
    ADD_CUSTOM_TARGET( ${_target} 
                      DEPENDS "${_doxygenBinaryDir}/Doxyfile" ${_generatedFiles}
                      COMMAND ${CMAKE_COMMAND} -E make_directory "${DOXYFILE_OUTPUT_DIRECTORY}"
                      COMMAND "${DOXYGEN_EXECUTABLE}" "${_doxygenBinaryDir}/Doxyfile" )
    # Make sure doc target exists, I do not know if it is clean
    add_dependencies( ${PROJECT_NAME}-doc ${_target} )
    # Install HTML documentation
    if( IS_ABSOLUTE "${DOXYFILE_HTML_OUTPUT}" )
      set( _directory "${DOXYFILE_HTML_OUTPUT}" )
    else( IS_ABSOLUTE "${DOXYFILE_HTML_OUTPUT}" )
      set( _directory "${DOXYFILE_OUTPUT_DIRECTORY}/${DOXYFILE_HTML_OUTPUT}" )
    endif( IS_ABSOLUTE "${DOXYFILE_HTML_OUTPUT}" )
    BRAINVISA_INSTALL( DIRECTORY "${_directory}"
                  DESTINATION "share/doc/${PROJECT_NAME}-${DOXYFILE_PROJECT_VERSION}/doxygen"
                  COMPONENT ${PROJECT_NAME}-doc )
  ENDIF( DOXYGEN_FOUND )
ENDMACRO( BRAINVISA_GENERATE_DOXYGEN_DOC )


# BRAINVISA_GENERATE_EPYDOC_DOC
#    Add rules to generate epydoc documentation with "make doc" or "make <component>-doc".
# Usage:
#
#   BRAINVISA_GENERATE_EPYDOC_DOC( <source directory> [ <source directory> ... ] <output directory> [ EXCLUDE <exclude list> ] )
#
# Example:
#
#   BRAINVISA_GENERATE_EPYDOC_DOC( "${CMAKE_BINARY_DIR}/python/soma"
#     "share/doc/${PROJECT_NAME}-${BRAINVISA_PACKAGE_VERSION_MAJOR}.${BRAINVISA_PACKAGE_VERSION_MINOR}/epydoc/html"
#     EXCLUDE soma.aims* )
#
function( BRAINVISA_GENERATE_EPYDOC_DOC  )
  if( Epydoc_FOUND )
    set( args "${ARGN}" )
    list( FIND args EXCLUDE result )
    set( excludeParameters )
    if( NOT result EQUAL -1 )
      list( REMOVE_AT args ${result} )
      list( GET args ${result} exclude )
      foreach( pattern ${exclude} )
        set( excludeParameters ${excludeParameters} "--exclude" "${pattern}" )
      endforeach()
      list( REMOVE_AT args ${result} )
    endif()
    
    list( GET args -1 outputDirectory )
    list( REMOVE_AT args -1 )
    set( sourceDirectories ${args} )
    
    set( pythonFiles )
    foreach( sourceDirectory ${sourceDirectories} )
      file( GLOB_RECURSE result "${sourceDirectory}/*.py" )
      set( pythonFiles ${pythonFiles} ${result} )
    endforeach()
    if( DOT_EXECUTABLE )
      set( dotParameters --dotpath "${DOT_EXECUTABLE}" --graph classtree )
    else()
      set( dotParameters )
    endif()
    add_custom_command( OUTPUT "${CMAKE_BINARY_DIR}/${outputDirectory}/index.html"
                        DEPENDS ${pythonFiles}
                        COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/${outputDirectory}"
                        COMMAND "${EPYDOC_EXECUTABLE}" 
                          --html
                          --name "${PROJECT_NAME} ${${PROJECT_NAME}_VERSION}"
                          -o "${CMAKE_BINARY_DIR}/${outputDirectory}"
                          --inheritance grouped
                          ${dotParameters}
                          ${excludeParameters}
                          ${sourceDirectories} )
      BRAINVISA_GENERATE_TARGET_NAME( target )
      add_custom_target( ${target} DEPENDS "${CMAKE_BINARY_DIR}/${outputDirectory}/index.html" )
      add_dependencies( ${PROJECT_NAME}-doc ${target} )
      # Install HTML documentation
      BRAINVISA_INSTALL( DIRECTORY "${CMAKE_BINARY_DIR}/${outputDirectory}"
                         DESTINATION "${outputDirectory}"
                         COMPONENT ${PROJECT_NAME}-doc )
  endif()
endfunction()



#
#
function( BRAINVISA_ADD_COMPONENT_GROUP _group )
  set( _readVariable )
  set( _parentGroup )
  foreach( _i ${ARGN} )
    if( _readVariable )
      set( ${_readVariable} "${_i}" )
#       set( _readVariable )
      break()
    else()
      if( "${_i}" STREQUAL PARENT_GROUP )
        set( _readVariable _parentGroup )
      endif()
    endif()
  endforeach()

#   message( "Create group ${_group} with parent \"${_parentGroup}\"" )
  cpack_add_component_group( ${_group} ${ARGN} )
  add_custom_target( install-${_group} )
  if( _parentGroup )
    add_dependencies( install-${_parentGroup} install-${_group} )
  endif()
endfunction()


#
#
function( BRAINVISA_ADD_COMPONENT _component )
  set( _readVariable )
  set( _group )
  foreach( _i ${ARGN} )
    if( _readVariable )
      set( ${_readVariable} "${_i}" )
#       set( _readVariable )
      break()
    else()
      if( "${_i}" STREQUAL GROUP )
        set( _readVariable _group )
      endif()
    endif()
  endforeach()

#   message( "Create component ${_component} in group ${_group}" )
  cpack_add_component( ${_component}
                       ${ARGN} )
  add_custom_target( install-${_component}
                     COMMAND ${CMAKE_COMMAND} -DCOMPONENT=${_component} -P "${CMAKE_BINARY_DIR}/cmake_install.cmake" )
  add_dependencies( install-${_group} install-${_component} )
endfunction()


#
#
function( BRAINVISA_INSTALL )
  set( args "${ARGN}" )
  list( FIND args COMPONENT result )
  if( result EQUAL -1 )
    message( FATAL_ERROR "COMPONENT argument is mandatory for BRAINVISA_INSTALL" )
  else()
    install( ${ARGN} )
  endif()
endfunction()


macro( BRAINVISA_ADD_MOC_FILES _sources )
  foreach( _current_FILE ${ARGN} )
    get_filename_component( _tmp_FILE ${_current_FILE} ABSOLUTE )
    file( READ "${_tmp_FILE}" _content )
    string( REGEX MATCH Q_OBJECT _match "${_content}" )
    if( _match )
      get_filename_component( _basename ${_tmp_FILE} NAME_WE )
      set( _moc ${CMAKE_CURRENT_BINARY_DIR}/${_basename}.moc.cpp )
      if( DESIRED_QT_VERSION EQUAL 3 )
        add_custom_command(OUTPUT ${_moc}
          COMMAND ${QT_MOC_EXECUTABLE}
          ARGS ${_tmp_FILE} -o ${_moc}
          DEPENDS ${_tmp_FILE}
        )
      else()
        QT4_GENERATE_MOC( "${_tmp_FILE}" "${_moc}" )
      endif()
      set(${_sources} ${${_sources}} "${_moc}" )
    endif()
  endforeach()
endmacro()


#
# Usage:
#   BRAINVISA_ADD_SIP_PYTHON_MODULE( <module> <directory> <mainSipFile> [ SIP_SOURCES <file> ... ] [ SIP_INCLUDE <directory> ... ] [ SIP_INSTALL <directory> ] )
#
#
macro( BRAINVISA_ADD_SIP_PYTHON_MODULE _moduleName _modulePath _mainSipFile )
  # Parse parameters
  set( _argn "${ARGN}" )
  list( FIND _argn SIP_INSTALL result )
  if( result EQUAL -1 )
    set( _SIP_INSTALL "share/${PROJECT_NAME}-${${PROJECT_NAME}_VERSION_MAJOR}.${${PROJECT_NAME}_VERSION_MINOR}/sip" )
  else()
    list( REMOVE_AT _argn ${result} )
    list( GET _argn ${result} _SIP_INSTALL )
    list( REMOVE_AT _argn ${result} )
  endif()
  set( _SIP_SOURCES )
  set( _SIP_INCLUDE "${CMAKE_CURRENT_SOURCE_DIR}" )
  set( _listVariable )
  foreach( _i ${_argn} )
    if( "${_i}" STREQUAL "SIP_SOURCES" OR
        "${_i}" STREQUAL "SIP_INCLUDE" )
      set( _listVariable "_${_i}" )
    else( "${_i}" STREQUAL "SIP_SOURCES" OR
        "${_i}" STREQUAL "SIP_INCLUDE" )
      if( _listVariable )
        set( ${_listVariable} ${${_listVariable}} "${_i}" )
      else( _listVariable )
        message( FATAL_ERROR "Invalid option for BRAINVISA_ADD_SIP_PYTHON_MODULE: ${_i}" )
      endif( _listVariable )
    endif( "${_i}" STREQUAL "SIP_SOURCES" OR
        "${_i}" STREQUAL "SIP_INCLUDE" )
  endforeach()

  # Build install rules for sip files
  BRAINVISA_COPY_FILES( ${PROJECT_NAME}-devel
    ${_mainSipFile} ${_SIP_SOURCES}
    DESTINATION "${_SIP_INSTALL}"
    IMMEDIATE )

  # Compute C++ file names that will be generated by sip.
  # This is only possible with -j option.
  set( _sipSplitGeneratedCode 8 )
  set(_sipOutputFiles )
  foreach( _i RANGE 0 ${_sipSplitGeneratedCode} )
    if( ${_i} LESS ${_sipSplitGeneratedCode} )
      set(_sipOutputFiles ${_sipOutputFiles} "${CMAKE_CURRENT_BINARY_DIR}/sip${_moduleName}part${_i}.cpp" )
    endif( ${_i} LESS ${_sipSplitGeneratedCode} )
  endforeach( _i RANGE 0 ${_sipSplitGeneratedCode} )

  # Build include options according to _SIP_INCLUDE
  set( _sipIncludeOptions )
  foreach( _i ${_SIP_INCLUDE} )
    set( _sipIncludeOptions ${_sipIncludeOptions} -I "${_i}" )
  endforeach( _i ${_SIP_INCLUDE} )

  # Add rule to generate C++ code with sip
  if( DESIRED_QT_VERSION EQUAL 3 )
    set( _sipFlags "-t" "ALL" "-t" "WS_X11" "-t" "Qt_3_3_0" )
  else()
    string( REPLACE " " ";" _sipFlags "${PYQT4_SIP_FLAGS}" )
  endif()
  add_custom_command(
    OUTPUT ${_sipOutputFiles}
    # Sip can generate less files than requested. The touch
    # command make sure that all the files are created (necessary)
    # for dependencies).
    COMMAND ${CMAKE_COMMAND} -E remove ${_sipOutputFiles}
    COMMAND ${SIP_EXECUTABLE}
            -j ${_sipSplitGeneratedCode}
            ${_sipIncludeOptions}
            -c "${CMAKE_CURRENT_BINARY_DIR}"
            -e
            ${_sipFlags}
            -x VendorID -x Qt_STYLE_WINDOWSXP -x Qt_STYLE_INTERLACE -x Qt_STYLE_WINDOWSXP
            ${_mainSipFile}
    COMMAND ${CMAKE_COMMAND} -E touch ${_sipOutputFiles}
    DEPENDS ${_mainSipFile} ${_SIP_SOURCES}
  )

  # Create library with sip generated files
  add_library( ${_moduleName} MODULE ${_sipOutputFiles} )
  set_target_properties( ${_moduleName} PROPERTIES
                LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/python/${_modulePath}"
                PREFIX "" )
  if( WIN32 )
    set_target_properties( ${_moduleName} PROPERTIES SUFFIX "pyd" )
  endif( WIN32 )
  BRAINVISA_INSTALL( TARGETS ${_moduleName} 
                     DESTINATION "python/${_modulePath}"
                     COMPONENT ${PROJECT_NAME} )
endmacro( BRAINVISA_ADD_SIP_PYTHON_MODULE _moduleName _modulePath _installComponent _installComponentDevel _sipSplitGeneratedCode _mainSipFile )


function( BRAINVISA_CREATE_CMAKE_CONFIG_FILES )
  string( TOUPPER "${PROJECT_NAME}" PROJECT_NAME_UPPER )
  set( _prefixForCmakeFiles "share/${PROJECT_NAME}-${BRAINVISA_PACKAGE_VERSION_MAJOR}.${BRAINVISA_PACKAGE_VERSION_MINOR}/cmake" )
  configure_file( cmake/${PROJECT_NAME}-config.cmake.in
                  "${CMAKE_BINARY_DIR}/${_prefixForCmakeFiles}/${PROJECT_NAME}-config.cmake" 
                  @ONLY )
  if( EXISTS "${BRAINVISA_SOURCES_${PROJECT_NAME}}/cmake/${PROJECT_NAME}-config-version.cmake.in" )
    configure_file( "${BRAINVISA_SOURCES_${PROJECT_NAME}}/cmake/${PROJECT_NAME}-config-version.cmake.in"
                    "${CMAKE_BINARY_DIR}/${_prefixForCmakeFiles}/${PROJECT_NAME}-config-version.cmake" 
                    @ONLY )
  else()
    configure_file( "${brainvisa-cmake_DIR}/brainvisa-cmake-config-version.cmake.in"
                    "${CMAKE_BINARY_DIR}/${_prefixForCmakeFiles}/${PROJECT_NAME}-config-version.cmake" 
                    @ONLY )
  endif()
  if( EXISTS "${BRAINVISA_SOURCES_${PROJECT_NAME}}/cmake/${PROJECT_NAME}-use.cmake.in" )
    configure_file( "${BRAINVISA_SOURCES_${PROJECT_NAME}}/cmake/${PROJECT_NAME}-use.cmake.in"
                    "${CMAKE_BINARY_DIR}/${_prefixForCmakeFiles}/${PROJECT_NAME}-use.cmake" 
                    @ONLY )
  else()
    configure_file( "${brainvisa-cmake_DIR}/default-use.cmake.in"
                    "${CMAKE_BINARY_DIR}/${_prefixForCmakeFiles}/${PROJECT_NAME}-use.cmake" 
                    @ONLY )
  endif()
  BRAINVISA_INSTALL( FILES
          "${CMAKE_BINARY_DIR}/${_prefixForCmakeFiles}/${PROJECT_NAME}-config.cmake"
          "${CMAKE_BINARY_DIR}/${_prefixForCmakeFiles}/${PROJECT_NAME}-config-version.cmake"
          "${CMAKE_BINARY_DIR}/${_prefixForCmakeFiles}/${PROJECT_NAME}-use.cmake"
          DESTINATION "${_prefixForCmakeFiles}"
          COMPONENT ${PROJECT_NAME}-devel )

  if( BRAINVISA_PACKAGING )
    # Create packaging rules
    CREATE_RUN_PACKAGE()
    CREATE_DEV_PACKAGE()
    CREATE_DOC_PACKAGE()
    CREATE_DEVDOC_PACKAGE()
    CREATE_SRC_PACKAGE()
  endif()
endfunction()


function( BRAINVISA_INSTALL_RUNTIME_LIBRARIES )
  set( librariesToInstall )
  foreach( lib ${ARGN} )
    get_filename_component( lib "${lib}" ABSOLUTE )
    if( UNIX OR APPLE )
      file( GLOB lib "${lib}*" )
    endif( UNIX OR APPLE )
    set( librariesToInstall ${librariesToInstall} ${lib} )
  endforeach( lib ${ARGN} )
  BRAINVISA_INSTALL( FILES ${librariesToInstall}
                DESTINATION lib
                COMPONENT system-runtime )
endfunction( BRAINVISA_INSTALL_RUNTIME_LIBRARIES )

