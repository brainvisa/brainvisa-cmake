find_package( DLib )

function( BRAINVISA_PACKAGING_COMPONENT_INFO component package_name package_maintainer package_version )
  # Find version
  set( version )
  if( DLIB_LIBRARIES )
    foreach( lib ${DLIB_LIBRARIES} )
      get_filename_component( real "${lib}" REALPATH )
      string( REGEX MATCH "^.*libdlib${CMAKE_SHARED_LIBRARY_SUFFIX}[.](.*)$" match "${real}" )
      if( match )
        set( version "${CMAKE_MATCH_1}" )
        break()
      endif()
    endforeach()
  endif()

  if( version )
    set( ${package_version} "${version}" PARENT_SCOPE )
    set( ${package_name} "${component}" PARENT_SCOPE )
  else()
    set( ${package_version} "0.0.0" PARENT_SCOPE )
    set( ${package_name} ${component} PARENT_SCOPE )
  endif()
  set( ${package_maintainer} "IFR 49" PARENT_SCOPE )
endfunction()

function( BRAINVISA_PACKAGING_COMPONENT_RUN component )
  if( DLIB_FOUND)
    BRAINVISA_INSTALL_RUNTIME_LIBRARIES( ${component} ${DLIB_LIBRARIES} )
    set(${component}_PACKAGED TRUE PARENT_SCOPE)
  else()
    set(${component}_PACKAGED FALSE PARENT_SCOPE)
  endif()
endfunction()

# this variable declares the install rule for the dev package
set( libdlib-dev-installrule TRUE )

function( BRAINVISA_PACKAGING_COMPONENT_DEV component )
  if(DLIB_FOUND)
    foreach( _dir ${DLIB_INCLUDE_DIRS} )
      get_filename_component( _name ${_dir} NAME )
      if( "${_name}" STREQUAL "dlib" )
        BRAINVISA_INSTALL_DIRECTORY( "${_dir}" include/dlib
          ${component}-dev )
      endif()
    endforeach()
    set(${component}-dev_PACKAGED TRUE PARENT_SCOPE)
  else()
    set(${component}-dev_PACKAGED FALSE PARENT_SCOPE)
  endif()
endfunction()
