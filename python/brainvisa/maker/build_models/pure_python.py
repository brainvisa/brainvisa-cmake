# -*- coding: utf-8 -*-
import os
import os.path as osp
import distutils.spawn

cmake_template = '''# This file was generated by bv_maker
# Source file: %(file)s

cmake_minimum_required( VERSION 2.6 )

find_package( brainvisa-cmake REQUIRED )
SET( BRAINVISA_REAL_SOURCE_DIR "%(source_directory)s")
BRAINVISA_PROJECT()

BRAINVISA_DEPENDENCY( RUN DEPENDS python RUN ">= 2.5;<< 3.0" )
BRAINVISA_COPY_PYTHON_DIRECTORY( "%(source_directory)s/%(component_name)s"
                                 ${PROJECT_NAME} python/%(component_name)s
                                 INSTALL_ONLY )
find_package( python REQUIRED )
find_package( Sphinx )

BRAINVISA_GENERATE_SPHINX_DOC( "%(source_directory)s/doc/source"
    "share/doc/capsul-${BRAINVISA_PACKAGE_VERSION_MAJOR}.${BRAINVISA_PACKAGE_VERSION_MINOR}" )

set( BV_ENV_PYTHON_CMD 
     "${CMAKE_BINARY_DIR}/bin/bv_env" "${PYTHON_EXECUTABLE}" )

# tests
enable_testing()
add_test( %(component_name)s-tests "${CMAKE_BINARY_DIR}/bin/bv_env" "${PYTHON_EXECUTABLE}" "%(source_directory)s/test/test_%(component_name)s.py" )
UNSET( BRAINVISA_REAL_SOURCE_DIR)
'''

sitecustomize_module_content = '''# This file was generated by bv_maker
# Source file: %s
import os
import os.path as osp
import sys

path, ext = osp.splitext(__file__)
pth_file = path+'.pth'
main_dir = osp.dirname(osp.dirname(__file__))
try:
    i = sys.path.index(main_dir)
except ValueError:
    i = -1
sys.path[i:i] = open(pth_file).read().strip().split(os.linesep)
''' % __file__

class PurePythonComponentBuild(object):
    def __init__(self, component_name, source_directory, build_directory,
                 options=None, args=None):
        self.component_name = component_name
        self.source_directory = source_directory
        self.build_directory = build_directory
        # options from option parser:
        self.options = options
        self.args = args

    def configure(self):
        # Create a bv_maker_pure_python.py module in 
        # <build>/python/sitecustomize (which is created by bv_maker). Modules
        # in this directory are loaded at Python startup time (only in the
        # buld tree, they are not installed in packages). This module adds the
        # content of bv_maker_pure_python.pth file to sys.path, just before
        # the path <build>/python
        sitecustomize_dir = osp.join(self.build_directory, 'python', 'sitecustomize')
        if not osp.exists(sitecustomize_dir):
            os.makedirs(sitecustomize_dir)
        module = osp.join(sitecustomize_dir,'bv_maker_pure_python.py')
        if not osp.exists(module) or open(module,'r').read() != sitecustomize_module_content:
            open(module,'w').write(sitecustomize_module_content)

        # Make sure file in pth_path contains self.source_directory
        pth_path = osp.join(sitecustomize_dir, 'bv_maker_pure_python.pth')
        if osp.exists(pth_path):
            directories = open(pth_path).read().split()
        else:
            directories = []
        if self.source_directory not in directories:
            directories.append(self.source_directory)
            open(pth_path,'w').write( os.linesep.join(directories))

        # Create <build directory>/build_files/<component>_src/CMakeLists.txt
        src_directory = osp.join(self.build_directory, 'build_files', 
                                 '%s_src' % self.component_name)
        if not osp.exists(src_directory):
            os.makedirs(src_directory)
        # It is necessary to escape backslash ('\') characters because
        # cmake interpretes it in CMakeLists.txt files.
        cmakelists_content = cmake_template % dict(
            file=os.path.normpath(
                    __file__
                 ).replace( '\\', '\\\\' ),
            component_name=self.component_name,
            source_directory= os.path.normpath(
                                  self.source_directory
                              ).replace( '\\', '\\\\' ) )
        cmakelists_path = osp.join(src_directory, 'CMakeLists.txt')
        write_cmakelists = False
        if osp.exists(cmakelists_path):
            write_cmakelists = (open(cmakelists_path).read() != 
                                cmakelists_content)
        else:
            write_cmakelists = True
        if write_cmakelists:
            open(cmakelists_path,'w').write(cmakelists_content)

        if self.options.clean:
            import brainvisa
            # look for <my_path>/bin when we are in <my_path>/python/brainvisa
            my_path = os.path.dirname(os.path.dirname(
                os.path.dirname(brainvisa.__file__)))
            bv_clean = os.path.join(my_path, 'bin', 'bv_clean_build_tree')
            if not os.path.exists(bv_clean):
                bv_clean = distutils.spawn.find_executable(
                    'bv_clean_build_tree')
            print 'cleaning build tree', self.source_directory
            subprocess.call([sys.executable, bv_clean, '-d',
                             self.source_directory])

